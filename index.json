{"repository_name":"rethinkdb-orm","body":"# RethinkDB ORM for Crystal Lang\n\n[![CI](https://github.com/spider-gazelle/rethinkdb-orm/actions/workflows/ci.yml/badge.svg)](https://github.com/spider-gazelle/rethinkdb-orm/actions/workflows/ci.yml)\n[![Documentation](https://img.shields.io/badge/Documentation-available-brightgreen.svg)](https://spider-gazelle.github.io/rethinkdb-orm)\n\nExtending [ActiveModel](https://github.com/spider-gazelle/active-model) for attribute definitions, callbacks and validations\n\n- [RethinkDB ORM for Crystal Lang](#rethinkdb-orm-for-crystal-lang)\n  - [Callbacks](#callbacks)\n  - [Associations](#associations)\n    - [`belongs_to`](#belongsto)\n    - [`has_many`](#hasmany)\n    - [`has_one`](#hasone)\n    - [Dependency](#dependency)\n  - [Indexes](#indexes)\n  - [Changefeeds](#changefeeds)\n  - [Validations](#validations)\n    - [`ensure_unique`](#ensureunique)\n  - [Timestamps](#timestamps)\n\n## Configuration\n\n```crystal\n# Below is the list of settings exposed by RethinkORM and their defaults\nRethinkORM::Settings.configure do |settings|\n  settings.host = ENV[\"RETHINKDB_HOST\"]? || \"localhost\"\n  settings.port = (ENV[\"RETHINKDB_PORT\"]? || 28015).to_i\n  settings.db = ENV[\"RETHINKDB_DB\"]? || ENV[\"RETHINKDB_DATABASE\"]? || \"test\"\n  settings.user = ENV[\"RETHINKDB_USER\"]? || \"admin\"\n  settings.password = ENV[\"RETHINKDB_PASSWORD\"]? || \"\"\n  settings.lock_expire = (ENV[\"RETHINKDB_LOCK_EXPIRE\"]? || 30).to_i.seconds\n  settings.lock_timeout = (ENV[\"RETHINKDB_LOCK_TIMEOUT\"]? || 5).to_i.seconds\n  settings.retry_interval = (ENV[\"RETHINKDB_TIMEOUT\"]? || 2).to_i.seconds\n\n  # Driver level reconnection attempts\n  settings.retry_attempts = ENV[\"RETHINKDB_RETRIES\"]?.try(&.to_i) || 10\n\n  # ORM level query retries\n  settings.query_retries = ENV[\"RETHINKDB_QUERY_RETRIES\"]?.try &.to_i || 10\nend\n```\n\n## Callbacks\n\nRegister callbacks for `save`, `update`, `create` and `destroy` by setting the corresponding before/after callback handler.\n\n```crystal\nclass ModelWithCallbacks < RethinkORM::Base\n  attribute address : String\n  attribute age : Int32 = 10\n\n  before_create :set_address\n  after_update :set_age\n  before_destroy do\n    self.name = \"joe\"\n  end\n\n  def set_address\n    self.address = \"23\"\n  end\n\n  def set_age\n    self.age = 30\n  end\nend\n```\n\n## Associations\n\nSet associations with `belongs_to`, `has_many` and `has_one`.\n\nAccess children in parent by accessing the method correpsonding to the pluralised child. Children collection method name is generated by dumb pluralisation (appending an s). Optionally set children collection name in `has_many` by setting `collection_name` param.\n\nThe `has_many` association requires the `belongs_to` association on the child. By default, `belongs_to` creates a secondary index on the foreign key.\n\n```crystal\nclass Parent < RethinkORM::Base\n  attribute name : String\n  has_many Child, collection_name: \"children\"\nend\n\nclass Child < RethinkORM::Base\n  attribute age : Int32\n  belongs_to Parent\n  has_many Pet\nend\n\nclass Pet < RethinkORM::Base\n  attribute name : String\n  belongs_to Child\nend\n\nparent = Parent.new(name: \"Phil\")\nparent.children.empty? # => true\n\nchild = Child.new(age: 99)\nchild.pets.empty? # => true\n```\n\n### `belongs_to`\n\nParameter      |                                                               | Default\n-------------- | ------------------------------------------------------------- | -------\n`parent_class` | The parent class who this class is dependent on               |\n`dependent`    | Sets destroy behaviour. One of `:none`, `:destroy`, `:delete` | `:none`\n`create_index` | Create a secondary index on the foreign key                   | `true`\n\n### `has_many`\n\nParameter         |                                                                               | Default\n----------------- | ----------------------------------------------------------------------------- | -------\n`child_class`     | The parent class who this class is dependent on                               |\n`dependent`       | Sets destroy behaviour. One of `:none`, `:destroy`, `:delete`                 | `:none`\n`collection_name` | Define collection name, otherwise collection named through dumb pluralisation | `nil`\n\n### `has_one`\n\nParameter         |                                                                               | Default\n----------------- | ----------------------------------------------------------------------------- | -------\n`child_class`     | The parent class who this class is dependent on                               |\n`dependent`       | Sets destroy behaviour. One of `:none`, `:destroy`, `:delete`                 | `:none`\n`collection_name` | Define collection name, otherwise collection named through dumb pluralisation | `nil`\n\n### Dependency\n\n`dependent` param in the association definition macros defines the fate of the association on model destruction.<br>\nDefault is `:none`, `:destroy` and `:delete` ensure destruction of association dependents.\n\n## Indexes\n\nSet secondary indexes with `secondary_index`\n\nParameter   |                                               |\n----------- | --------------------------------------------- |\n`attribute` | defines the field on which to create an index |\n\n## Changefeeds\n\nAccess the changefeed of a document or table through the `changes` query.<br>\nDefaults to watch for events on a table if no id provided.\n\nParameter |                                     | Default\n--------- | ----------------------------------- | -------\n`id`      | id of document to watch for changes | nil\n\nReturns an iterator that emits `NamedTuple(value: T, event: Event)`<br>\n\n- `Changefeed::Event::Deleted` events yield the deleted model\n- `Changefeed::Event::Created` events yield the created model\n- `Changefeed::Event::Updated` events yield the updated model\n\n```crystal\nclass Game < RethinkORM::Base\n  attribute type : String\n  attribute score : Int32, default: 0\nend\n\nballgame = Game.create!(type: \"footy\")\n\n# Observe changes on a single document\nspawn do\n  Game.changes(ballgame.id).each do |change|\n    game = change.value\n    puts \"looks like the score is #{game.score}\" unless game.nil?\n  end\nend\n\n# Observe changes on a table\nspawn do\n  Game.changes.each do |change|\n    game = change.value\n    puts \"#{game.type}: #{game.score}\" unless game.nil?\n    puts \"game event: #{change.event}\"\n  end\nend\n```\n\n## Validations\n\nBuilds on [active-model's validation](https://github.com/spider-gazelle/active-model#validations)\n\n### `ensure_unique`\n\nFails to validate if field with duplicate value present in db.\nIf scope is set, the callback/block signature must be a tuple with types matching that of the scope.\nThe field(s) are set with the result of the transform block upon successful validation\n\nParameter               |                                                         | Default\n----------------------- | ------------------------------------------------------- | -------\n`field`                 | Model attribute on which to guarantee uniqueness        |\n`scope`                 | Attributes passed to the transform, defaults to :field  | nil\n`create_index`          | Whether or not to generate a secondary index            | true\n`callback : T -> T`     | Optional function to transform field value              | nil\n`block : T -> T`        | Optional block to transform field value before querying | nil\n\n\n## Timestamps\n\nAdds creates `created_at` and `updated_at` attributes.\n- `updated_at` is set through the `before_update` callback, and initially set in the `before_save` callback.\n- `created_at` is set through the `before_create` callback.\n\nThe generated timestamp is UTC.\n\n```crystal\nclass Timo < RethinkORM::Base\n  # Simply include the module\n  include RethinkORM::Timestamps\n\n  attribute name : String\nend\n```\n","program":{"html_id":"rethinkdb-orm/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"ancestors":[{"html_id":"rethinkdb-orm/RethinkDB/Shortcuts","kind":"module","full_name":"RethinkDB::Shortcuts","name":"Shortcuts"}],"locations":[],"repository_name":"rethinkdb-orm","program":true,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"rethinkdb-orm/RethinkDB/Shortcuts","kind":"module","full_name":"RethinkDB::Shortcuts","name":"Shortcuts"}],"extended_modules":[{"html_id":"rethinkdb-orm/RethinkDB/Shortcuts","kind":"module","full_name":"RethinkDB::Shortcuts","name":"Shortcuts"}],"types":[{"html_id":"rethinkdb-orm/RethinkDB","path":"RethinkDB.html","kind":"module","full_name":"RethinkDB","name":"RethinkDB","abstract":false,"locations":[{"filename":"lib/rethinkdb/src/rethinkdb.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-datum.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-datum.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-db.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-db.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-global.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-global.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-grouped.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-grouped.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-row.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-row.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-rows.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-rows.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-stream.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-stream.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-table.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-table.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/api-term.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/api-term.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/auth.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/auth.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/connection.cr","line_number":15,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/connection.cr#L15"},{"filename":"lib/rethinkdb/src/rethinkdb/constants.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/constants.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/cursor.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/cursor.cr#L4"},{"filename":"lib/rethinkdb/src/rethinkdb/error.cr","line_number":1,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/error.cr#L1"},{"filename":"lib/rethinkdb/src/rethinkdb/message.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/message.cr#L3"},{"filename":"lib/rethinkdb/src/rethinkdb/serialization.cr","line_number":106,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/serialization.cr#L106"},{"filename":"lib/rethinkdb/src/rethinkdb/term.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/term.cr#L3"},{"filename":"src/rethinkdb-orm/connection.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L9"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"rethinkdb-orm/RethinkDB/Connection","path":"RethinkDB/Connection.html","kind":"class","full_name":"RethinkDB::Connection","name":"Connection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/rethinkdb/src/rethinkdb/connection.cr","line_number":16,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/lib/rethinkdb/src/rethinkdb/connection.cr#L16"},{"filename":"src/rethinkdb-orm/connection.cr","line_number":10,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L10"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkDB","kind":"module","full_name":"RethinkDB","name":"RethinkDB"},"instance_methods":[{"html_id":"closed?-instance-method","name":"closed?","abstract":false,"location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":11,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L11"},"def":{"name":"closed?","visibility":"Public","body":"sock.closed?"}}]}]},{"html_id":"rethinkdb-orm/RethinkORM","path":"RethinkORM.html","kind":"module","full_name":"RethinkORM","name":"RethinkORM","abstract":false,"locations":[{"filename":"src/rethinkdb-orm.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm.cr#L3"},{"filename":"src/rethinkdb-orm/connection.cr","line_number":17,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L17"},{"filename":"src/rethinkdb-orm/lock.cr","line_number":10,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L10"},{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L3"},{"filename":"src/rethinkdb-orm/settings.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/settings.cr#L3"},{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L4"},{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/collection.cr#L3"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"}],"class_methods":[{"html_id":"configure(&)-class-method","name":"configure","abstract":false,"location":{"filename":"src/rethinkdb-orm.cr","line_number":6,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm.cr#L6"},"def":{"name":"configure","yields":1,"visibility":"Public","body":"Settings.configure do |settings|\n  yield settings\nend"}}],"types":[{"html_id":"rethinkdb-orm/RethinkORM/AssociationCollection","path":"RethinkORM/AssociationCollection.html","kind":"class","full_name":"RethinkORM::AssociationCollection(Owner, Target)","name":"AssociationCollection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L3"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"constructors":[{"html_id":"new(owner,foreign_key=nil)-class-method","name":"new","abstract":false,"args":[{"name":"owner","external_name":"owner","restriction":""},{"name":"foreign_key","default_value":"nil","external_name":"foreign_key","restriction":""}],"args_string":"(owner, foreign_key = nil)","args_html":"(owner, foreign_key = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L13"},"def":{"name":"new","args":[{"name":"owner","external_name":"owner","restriction":""},{"name":"foreign_key","default_value":"nil","external_name":"foreign_key","restriction":""}],"visibility":"Public","body":"_ = AssociationCollection(Owner, Target).allocate\n_.initialize(owner, foreign_key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"all-instance-method","name":"all","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":17,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L17"},"def":{"name":"all","visibility":"Public","body":"if Target.has_index?(foreign_key)\n  Target.find_all([owner.id.as(String)], index: foreign_key)\nelse\n  Target.where({\"#{foreign_key}\" => owner.id.as(String)})\nend"}},{"html_id":"each(*args,**options)-instance-method","name":"each","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":11,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L11"},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"all.each(*args, **options)"}},{"html_id":"each(*args,**options,&)-instance-method","name":"each","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":11,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L11"},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"all.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"find(*args,**options)-instance-method","name":"find","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L9"},"def":{"name":"find","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"Target.find(*args, **options)"}},{"html_id":"find(*args,**options,&)-instance-method","name":"find","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L9"},"def":{"name":"find","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"Target.find(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"find!(*args,**options)-instance-method","name":"find!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L9"},"def":{"name":"find!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"Target.find!(*args, **options)"}},{"html_id":"find!(*args,**options,&)-instance-method","name":"find!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L9"},"def":{"name":"find!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"Target.find!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"where(**attrs)-instance-method","name":"where","doc":"Filter associated documents\n","summary":"<p>Filter associated documents</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":27,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L27"},"def":{"name":"where","double_splat":{"name":"attrs","external_name":"attrs","restriction":""},"visibility":"Public","body":"Target.collection_query do |q|\n  index_query = q.get_all([owner.id], index: foreign_key)\n  attrs_hash = attrs.to_h\n  attrs_hash.empty? ? index_query : index_query.filter(attrs_hash)\nend"}},{"html_id":"where(**attrs,&)-instance-method","name":"where","doc":"Filter associated documents\n","summary":"<p>Filter associated documents</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":37,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/association_collection.cr#L37"},"def":{"name":"where","double_splat":{"name":"attrs","external_name":"attrs","restriction":""},"yields":1,"visibility":"Public","body":"Target.collection_query do |q|\n  index_query = q.get_all([owner.id], index: foreign_key)\n  attrs_hash = attrs.to_h\n  attribute_filtered = attrs_hash.empty? ? index_query : index_query.filter(attrs_hash)\n  attribute_filtered.filter do |t|\n    yield t\n  end\nend"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Associations","path":"RethinkORM/Associations.html","kind":"module","full_name":"RethinkORM::Associations","name":"Associations","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/associations.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/associations.cr#L3"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"instance_methods":[{"html_id":"reset_associations-instance-method","name":"reset_associations","abstract":false,"location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":131,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/associations.cr#L131"},"def":{"name":"reset_associations","visibility":"Public","body":""}}],"macros":[{"html_id":"belongs_to(parent_class,dependent=:none,create_index=true,association_name=nil,foreign_key=nil,presence=false)-macro","name":"belongs_to","doc":"Defines getter and setter for parent relationship","summary":"<p>Defines getter and setter for parent relationship</p>","abstract":false,"args":[{"name":"parent_class","external_name":"parent_class","restriction":""},{"name":"dependent","default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","default_value":"true","external_name":"create_index","restriction":""},{"name":"association_name","default_value":"nil","external_name":"association_name","restriction":""},{"name":"foreign_key","default_value":"nil","external_name":"foreign_key","restriction":""},{"name":"presence","default_value":"false","external_name":"presence","restriction":""}],"args_string":"(parent_class, dependent = :none, create_index = true, association_name = nil, foreign_key = nil, presence = false)","args_html":"(parent_class, dependent = <span class=\"n\">:none</span>, create_index = <span class=\"n\">true</span>, association_name = <span class=\"n\">nil</span>, foreign_key = <span class=\"n\">nil</span>, presence = <span class=\"n\">false</span>)","location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":5,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/associations.cr#L5"},"def":{"name":"belongs_to","args":[{"name":"parent_class","external_name":"parent_class","restriction":""},{"name":"dependent","default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","default_value":"true","external_name":"create_index","restriction":""},{"name":"association_name","default_value":"nil","external_name":"association_name","restriction":""},{"name":"foreign_key","default_value":"nil","external_name":"foreign_key","restriction":""},{"name":"presence","default_value":"false","external_name":"presence","restriction":""}],"visibility":"Public","body":"    \n{% parent_name = association_name || (parent_class.id.stringify.underscore.downcase.gsub(/::/, \"_\")) %}\n\n    \n{% foreign_key = (foreign_key || \"#{parent_name.id}_id\").id %}\n\n    \n{% association_method = parent_name.id.symbolize %}\n\n    \n{% assoc_var = \"__#{parent_name.id}\".id %}\n\n\n    attribute \n{{ foreign_key.id }}\n : String \n{% if presence %}{% else %} | Nil {% end %}\n, parent: \n{{ parent_class.id.stringify }}\n, \nes_type: \"keyword\"\n    property \n{{ assoc_var }}\n : \n{{ parent_class }}\n?\n    destroy_callback(\n{{ association_method }}\n, \n{{ dependent }}\n)\n\n    \n{% if create_index %}\n      secondary_index({{ foreign_key.id }})\n    {% end %}\n\n\n    \n# Retrieves the parent relationship\n\n    def \n{{ parent_name.id }}\n : \n{{ parent_class }}\n?\n      parent = @\n{{ assoc_var }}\n\n      key = self.\n{{ foreign_key }}\n\n\n      return parent if parent\n\n      self.\n{{ assoc_var }}\n = key ? \n{{ parent_class }}\n.find(key) : nil\n    \nend\n\n    def \n{{ parent_name.id }}\n! : \n{{ parent_class }}\n\n      parent = @\n{{ assoc_var }}\n\n      key = self.\n{{ foreign_key }}\n\n\n      return parent if parent\n      raise RethinkORM::Error.new(\"No \n{{ foreign_key }}\n set\") unless key\n\n      self.\n{{ assoc_var }}\n = \n{{ parent_class }}\n.find!(key)\n    \nend\n\n    \n# Sets the parent relationship\n\n    def \n{{ parent_name.id }}\n=(parent : \n{{ parent_class }}\n)\n      self.\n{{ assoc_var }}\n = parent\n      self.\n{{ foreign_key.id }}\n = parent.id.as(String)\n    \nend\n\n    def reset_associations\n      self.\n{{ assoc_var }}\n = nil\n    \nend\n\n    \n# Look up instances of this model dependent on the foreign key\n\n    def self.by_\n{{ foreign_key.id }}\n(id)\n      if self.has_index?(\n{{ foreign_key.id.stringify }}\n)\n        self.find_all([id], index: \n{{ foreign_key.id.stringify }}\n)\n      \nelse\n        self.where(\n{{ foreign_key }}\n: id)\n      \nend\n    \nend\n  \n"}},{"html_id":"has_many(child_class,collection_name=nil,dependent=:none,foreign_key=nil)-macro","name":"has_many","doc":"Must be used in conjunction with the belongs_to macro","summary":"<p>Must be used in conjunction with the belongs_to macro</p>","abstract":false,"args":[{"name":"child_class","external_name":"child_class","restriction":""},{"name":"collection_name","default_value":"nil","external_name":"collection_name","restriction":""},{"name":"dependent","default_value":":none","external_name":"dependent","restriction":""},{"name":"foreign_key","default_value":"nil","external_name":"foreign_key","restriction":""}],"args_string":"(child_class, collection_name = nil, dependent = :none, foreign_key = nil)","args_html":"(child_class, collection_name = <span class=\"n\">nil</span>, dependent = <span class=\"n\">:none</span>, foreign_key = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":103,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/associations.cr#L103"},"def":{"name":"has_many","args":[{"name":"child_class","external_name":"child_class","restriction":""},{"name":"collection_name","default_value":"nil","external_name":"collection_name","restriction":""},{"name":"dependent","default_value":":none","external_name":"dependent","restriction":""},{"name":"foreign_key","default_value":"nil","external_name":"foreign_key","restriction":""}],"visibility":"Public","body":"    \n{% child_collection = (collection_name ? collection_name : child_class + 's').underscore.downcase %}\n\n    \n{% association_method = child_collection.id.symbolize %}\n\n\n    destroy_callback(\n{{ association_method }}\n, \n{{ dependent }}\n)\n\n    def \n{{ child_collection.id }}\n\n      RethinkORM::AssociationCollection(self, \n{{ child_class }}\n).new(self, \n{{ foreign_key }}\n)\n    \nend\n  \n"}},{"html_id":"has_one(child_class,dependent=:none,create_index=false,association_name=nil,presence=false)-macro","name":"has_one","abstract":false,"args":[{"name":"child_class","external_name":"child_class","restriction":""},{"name":"dependent","default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","default_value":"false","external_name":"create_index","restriction":""},{"name":"association_name","default_value":"nil","external_name":"association_name","restriction":""},{"name":"presence","default_value":"false","external_name":"presence","restriction":""}],"args_string":"(child_class, dependent = :none, create_index = false, association_name = nil, presence = false)","args_html":"(child_class, dependent = <span class=\"n\">:none</span>, create_index = <span class=\"n\">false</span>, association_name = <span class=\"n\">nil</span>, presence = <span class=\"n\">false</span>)","location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":59,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/associations.cr#L59"},"def":{"name":"has_one","args":[{"name":"child_class","external_name":"child_class","restriction":""},{"name":"dependent","default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","default_value":"false","external_name":"create_index","restriction":""},{"name":"association_name","default_value":"nil","external_name":"association_name","restriction":""},{"name":"presence","default_value":"false","external_name":"presence","restriction":""}],"visibility":"Public","body":"    \n{% child = association_name || (child_class.id.underscore.downcase.gsub(/::/, \"_\")) %}\n\n    \n{% assoc_var = \"__#{child.id}\".id %}\n\n    \n{% foreign_key = child + \"_id\" %}\n\n    \n{% association_method = child.id.symbolize %}\n\n\n    attribute \n{{ foreign_key.id }}\n : String \n{% if presence %}{% else %} | Nil {% end %}\n\n    property \n{{ assoc_var }}\n : \n{{ child_class }}\n?\n    destroy_callback(\n{{ association_method }}\n, \n{{ dependent }}\n)\n\n    \n{% if create_index %}\n      secondary_index({{ foreign_key.id }})\n    {% end %}\n\n\n    \n# Get cached child or attempt to load an associated \n{{ child.id }}\n\n\n    def \n{{ child.id }}\n : \n{{ child_class }}\n?\n      key = self.\n{{ foreign_key.id }}\n\n      child = @\n{{ assoc_var }}\n\n      return child unless child.nil?\n\n      self.\n{{ assoc_var }}\n = key && !key.empty? ? \n{{ child_class }}\n.find(key)\n                                                : nil\n    \nend\n\n    def \n{{ child.id }}\n! : \n{{ child_class }}\n\n      key = self.\n{{ foreign_key.id }}\n\n      child = @\n{{ assoc_var }}\n\n      return child unless child.nil?\n      raise RethinkORM::Error.new(\"No \n{{ foreign_key.id }}\n set\") unless key\n\n      self.\n{{ assoc_var }}\n = \n{{ child_class }}\n.find!(key)\n    \nend\n\n    def \n{{ child.id }}\n=(child)\n      self.\n{{ assoc_var }}\n = child\n      self.\n{{ foreign_key.id }}\n = child.id.as(String)\n    \nend\n\n    def reset_associations\n      self.\n{{ assoc_var }}\n = nil\n    \nend\n  \n"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Base","path":"RethinkORM/Base.html","kind":"class","full_name":"RethinkORM::Base","name":"Base","abstract":true,"superclass":{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},{"html_id":"rethinkdb-orm/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"rethinkdb-orm/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/base.cr","line_number":14,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L14"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"AM_PARENT_TYPE","name":"AM_PARENT_TYPE","value":"{:type => RethinkORM::Base} of Nil => Nil"},{"id":"INDICES","name":"INDICES","value":"[] of NamedTuple(field: String, table: String)"},{"id":"TABLES","name":"TABLES","value":"[\"locks\"] of String"}],"included_modules":[{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"}],"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"class_methods":[{"html_id":"all(**options)-class-method","name":"all","doc":"Cursor of each model in the database","summary":"<p>Cursor of each model in the database</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"all","double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"cursor = Connection.raw(**options) do |q|\n  q.table(table_name)\nend\nCollection(self).new(cursor)\n"}},{"html_id":"attributes:Array(Symbol)-class-method","name":"attributes","doc":"Returns all attribute keys.","summary":"<p>Returns all attribute keys.</p>","abstract":false,"def":{"name":"attributes","return_type":"Array(Symbol)","visibility":"Public","body":"[:id]"}},{"html_id":"changes(id:String?=nil,**options)-class-method","name":"changes","doc":"Changefeed at document (if id passed) or table level\n\nYields an infinite iterator  of model events","summary":"<p>Changefeed at document (if id passed) or table level</p>","abstract":false,"args":[{"name":"id","default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"args_string":"(id : String? = nil, **options)","args_html":"(id : String? = <span class=\"n\">nil</span>, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"changes","args":[{"name":"id","default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"cursor = table_query(**options) do |q|\n  id ? (q.get(id)).changes : q.changes\nend\nChangefeed(self).new(cursor)\n"}},{"html_id":"changes(**options,&:RethinkDB::Table->HasChanges)-class-method","name":"changes","doc":"Creates a Changefeed on query\n","summary":"<p>Creates a Changefeed on query</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"changes","double_splat":{"name":"options","external_name":"options","restriction":""},"yields":1,"block_arg":{"name":"","external_name":"","restriction":"(RethinkDB::Table -> HasChanges)"},"visibility":"Public","body":"cursor = table_query(**options) do |q|\n  change_query = yield q\n  change_query.changes\nend\nChangefeed(self).new(cursor)\n"}},{"html_id":"clear-class-method","name":"clear","doc":"Removes all records from the table\n","summary":"<p>Removes all records from the table</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L20"},"def":{"name":"clear","visibility":"Public","body":"Connection.raw do |q|\n  (q.table(@@table_name)).delete\nend"}},{"html_id":"collection_query(**options,&)-class-method","name":"collection_query","doc":"**Unsafe** method until `where` can accept more generic arguments\nMakes 2 **LARGE** assumptions\n- User correctly scopes the query under the right table\n- User forms a query that returns a collection of models\n\nShould raise/not compile on malformed query/incorrect return type to create a collection","summary":"<p><strong>Unsafe</strong> method until <code><a href=\"../RethinkORM/Base.html#where%28%26predicate%3ARethinkDB%3A%3ADatumTerm-%3ERethinkDB%3A%3ADatumTerm%29-class-method\">.where</a></code> can accept more generic arguments Makes 2 <strong>LARGE</strong> assumptions - User correctly scopes the query under the right table - User forms a query that returns a collection of models</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"collection_query","double_splat":{"name":"options","external_name":"options","restriction":""},"yields":1,"visibility":"Public","body":"cursor = Connection.raw(**options) do |q|\n  yield q.table(table_name)\nend\nCollection(self).new(cursor)\n"}},{"html_id":"count-class-method","name":"count","doc":"Returns a count of all documents in the table\n","summary":"<p>Returns a count of all documents in the table</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"count","visibility":"Public","body":"result = table_query do |q|\n  q.count\nend\nresult.try(&.as_i) || 0\n"}},{"html_id":"count(**attrs)-class-method","name":"count","doc":"Returns a count of all documents in the table\n","summary":"<p>Returns a count of all documents in the table</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"count","double_splat":{"name":"attrs","external_name":"attrs","restriction":""},"visibility":"Public","body":"result = table_query do |q|\n  (q.filter(attrs)).count\nend\nresult.try(&.as_i) || 0\n"}},{"html_id":"count(**attrs,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"count","doc":"Returns a count of documents for which predicate block is true\n","summary":"<p>Returns a count of documents for which predicate block is true</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"count","double_splat":{"name":"attrs","external_name":"attrs","restriction":""},"yields":1,"block_arg":{"name":"predicate","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"visibility":"Public","body":"result = table_query do |q|\n  handle = (attrs.empty? ? q : q.filter(attrs))\n  handle.filter(&predicate).count\nend\nresult.try(&.as_i) || 0\n"}},{"html_id":"create(**attributes)-class-method","name":"create","doc":"Creates the model.\n\nPersistence can be confirmed via `#persisted?`","summary":"<p>Creates the model.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L20"},"def":{"name":"create","double_splat":{"name":"attributes","external_name":"attributes","restriction":""},"visibility":"Public","body":"document = new(**attributes)\ndocument.save!\ndocument\n"}},{"html_id":"create!(**attributes)-class-method","name":"create!","doc":"Creates the model.\n\nSee `#save!`","summary":"<p>Creates the model.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L20"},"def":{"name":"create!","double_splat":{"name":"attributes","external_name":"attributes","restriction":""},"visibility":"Public","body":"(new(**attributes)).save!"}},{"html_id":"exists?(id:String,**options)-class-method","name":"exists?","doc":"Check for document presence in the table\n","summary":"<p>Check for document presence in the table</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String, **options)","args_html":"(id : String, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"exists?","args":[{"name":"id","external_name":"id","restriction":"String"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"result = table_query(**options) do |q|\n  (q.get(id)) != nil\nend\nresult.as_bool\n"}},{"html_id":"find(id:String,**options)-class-method","name":"find","doc":"Find single document by id\n","summary":"<p>Find single document by id</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String, **options)","args_html":"(id : String, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"find","args":[{"name":"id","external_name":"id","restriction":"String"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"result = table_query(**options) do |q|\n  q.get(id)\nend\nif result.raw.nil?\nelse\n  self.from_trusted_json(result.to_json)\nend\n"}},{"html_id":"find!(id:String,**options)-class-method","name":"find!","doc":"Lookup document by id\n\nThrows if document is not present","summary":"<p>Lookup document by id</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String, **options)","args_html":"(id : String, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"find!","args":[{"name":"id","external_name":"id","restriction":"String"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"document = find(id, **options)\nif document\nelse\n  raise(RethinkORM::Error::DocumentNotFound.new(\"Key not present: #{id}\"))\nend\ndocument\n"}},{"html_id":"find_all(ids:Array|Tuple,**options)-class-method","name":"find_all","doc":"Query by ids, optionally set a secondary index\n","summary":"<p>Query by ids, optionally set a secondary index</p>","abstract":false,"args":[{"name":"ids","external_name":"ids","restriction":"Array | Tuple"}],"args_string":"(ids : Array | Tuple, **options)","args_html":"(ids : Array | Tuple, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"find_all","args":[{"name":"ids","external_name":"ids","restriction":"Array | Tuple"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"cursor = table_query do |q|\n  q.get_all(ids, **options)\nend\nCollection(self).new(cursor)\n"}},{"html_id":"find_by(**attribute)-class-method","name":"find_by","doc":"Returns documents with columns matching the given criteria\n","summary":"<p>Returns documents with columns matching the given criteria</p>\n<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../RethinkORM/Base.html#where%28%26predicate%3ARethinkDB%3A%3ADatumTerm-%3ERethinkDB%3A%3ADatumTerm%29-class-method\">.where</a></code> instead.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"find_by","double_splat":{"name":"attribute","external_name":"attribute","restriction":""},"visibility":"Public","body":"where(**attribute)"}},{"html_id":"find_by(**attribute,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"find_by","doc":"Returns documents with columns matching the given criteria\n","summary":"<p>Returns documents with columns matching the given criteria</p>\n<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../RethinkORM/Base.html#where%28%26predicate%3ARethinkDB%3A%3ADatumTerm-%3ERethinkDB%3A%3ADatumTerm%29-class-method\">.where</a></code> instead.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"find_by","double_splat":{"name":"attribute","external_name":"attribute","restriction":""},"yields":1,"block_arg":{"name":"predicate","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"visibility":"Public","body":"where(**attribute, &predicate)"}},{"html_id":"get_all(values:Array|Tuple,**options)-class-method","name":"get_all","doc":"Query by ids, optionally set a secondary index\n","summary":"<p>Query by ids, optionally set a secondary index</p>\n<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../RethinkORM/Base.html#find_all%28ids%3AArray%7CTuple%2C%2A%2Aoptions%29-class-method\">.find_all</a></code> instead.</p>","abstract":false,"args":[{"name":"values","external_name":"values","restriction":"Array | Tuple"}],"args_string":"(values : Array | Tuple, **options)","args_html":"(values : Array | Tuple, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"get_all","args":[{"name":"values","external_name":"values","restriction":"Array | Tuple"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"find_all(values, **options)"}},{"html_id":"has_index?(field)-class-method","name":"has_index?","abstract":false,"args":[{"name":"field","external_name":"field","restriction":""}],"args_string":"(field)","args_html":"(field)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":19,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L19"},"def":{"name":"has_index?","args":[{"name":"field","external_name":"field","restriction":""}],"visibility":"Public","body":"RethinkORM::Base::INDICES.any? do |index|\n  (self.table_name == index[:table]) && (field == index[:field])\nend"}},{"html_id":"raw_changes(id:String?=nil,**options)-class-method","name":"raw_changes","doc":"Establishes a changefeed of models in a RethinkDB table\nChangefeed at document (id passed) or table level\n","summary":"<p>Establishes a changefeed of models in a RethinkDB table Changefeed at document (id passed) or table level</p>","abstract":false,"args":[{"name":"id","default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"args_string":"(id : String? = nil, **options)","args_html":"(id : String? = <span class=\"n\">nil</span>, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"raw_changes","args":[{"name":"id","default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"cursor = table_query(**options) do |q|\n  id ? (q.get(id)).changes : q.changes\nend\nChangefeed::Raw.new(cursor)\n"}},{"html_id":"raw_changes(**options,&:RethinkDB::Table->HasChanges)-class-method","name":"raw_changes","doc":"Creates a Changefeed::Raw on query\n","summary":"<p>Creates a Changefeed::Raw on query</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"raw_changes","double_splat":{"name":"options","external_name":"options","restriction":""},"yields":1,"block_arg":{"name":"","external_name":"","restriction":"(RethinkDB::Table -> HasChanges)"},"visibility":"Public","body":"cursor = table_query(**options) do |q|\n  query = yield q\n  query.changes\nend\nChangefeed::Raw.new(cursor)\n"}},{"html_id":"raw_query(**options,&)-class-method","name":"raw_query","doc":"**Unsafe** method until `where` can accept more generic arguments\nMakes 2 **LARGE** assumptions\n- User correctly scopes the query under the right table\n- User forms a query that returns a collection of models\n\nShould raise/not compile on malformed query/incorrect return type to create a collection","summary":"<p><strong>Unsafe</strong> method until <code><a href=\"../RethinkORM/Base.html#where%28%26predicate%3ARethinkDB%3A%3ADatumTerm-%3ERethinkDB%3A%3ADatumTerm%29-class-method\">.where</a></code> can accept more generic arguments Makes 2 <strong>LARGE</strong> assumptions - User correctly scopes the query under the right table - User forms a query that returns a collection of models</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"raw_query","double_splat":{"name":"options","external_name":"options","restriction":""},"yields":1,"visibility":"Public","body":"cursor = Connection.raw(**options) do |q|\n  yield q\nend\nCollection(self).new(cursor)\n"}},{"html_id":"table_query(**options,&)-class-method","name":"table_query","doc":"Yield a RethinkDB handle namespaced under the document table\n","summary":"<p>Yield a RethinkDB handle namespaced under the document table</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"table_query","double_splat":{"name":"options","external_name":"options","restriction":""},"yields":1,"visibility":"Public","body":"Connection.raw(**options) do |q|\n  yield q.table(table_name)\nend"}},{"html_id":"where(&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"where","doc":"Returns documents for which predicate block is true\n","summary":"<p>Returns documents for which predicate block is true</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"where","yields":1,"block_arg":{"name":"predicate","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"visibility":"Public","body":"cursor = table_query do |q|\n  q.filter(&predicate)\nend\nCollection(self).new(cursor)\n"}},{"html_id":"where(**attrs,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"where","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"where","double_splat":{"name":"attrs","external_name":"attrs","restriction":""},"yields":1,"block_arg":{"name":"predicate","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"visibility":"Public","body":"cursor = table_query do |q|\n  (q.filter(attrs)).filter(&predicate)\nend\nCollection(self).new(cursor)\n"}},{"html_id":"where(attrs:Hash,**options)-class-method","name":"where","doc":"Returns documents containing fields that match the attributes\n","summary":"<p>Returns documents containing fields that match the attributes</p>","abstract":false,"args":[{"name":"attrs","external_name":"attrs","restriction":"Hash"}],"args_string":"(attrs : Hash, **options)","args_html":"(attrs : Hash, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"where","args":[{"name":"attrs","external_name":"attrs","restriction":"Hash"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"cursor = table_query(**options) do |q|\n  q.filter(attrs)\nend\nCollection(self).new(cursor)\n"}},{"html_id":"where(**attrs)-class-method","name":"where","doc":"Returns documents containing fields that match the attributes\n","summary":"<p>Returns documents containing fields that match the attributes</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L21"},"def":{"name":"where","double_splat":{"name":"attrs","external_name":"attrs","restriction":""},"visibility":"Public","body":"where(attrs.to_h)"}}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":14,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L14"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":14,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L14"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":39,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L39"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif attributes == other.attributes\nelse\n  return false\nend\nif changed_attributes == other.changed_attributes\nelse\n  return false\nend\ntrue\n"}},{"html_id":"apply_defaults-instance-method","name":"apply_defaults","doc":"Generate code to apply default values","summary":"<p>Generate code to apply default values</p>","abstract":false,"def":{"name":"apply_defaults","visibility":"Public","body":"super()"}},{"html_id":"assign_attributes(id:String?|Missing=Missing)-instance-method","name":"assign_attributes","doc":"Assign to multiple attributes.","summary":"<p>Assign to multiple attributes.</p>","abstract":false,"args":[{"name":"id","default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"}],"args_string":"(id : String? | Missing = Missing)","args_html":"(id : String? | Missing = <span class=\"t\">Missing</span>)","def":{"name":"assign_attributes","args":[{"name":"id","default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"}],"visibility":"Public","body":""}},{"html_id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","name":"assign_attributes","doc":"Assign to mulitple attributes via `HTTP::Params`.","summary":"<p>Assign to mulitple attributes via <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","def":{"name":"assign_attributes","args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"visibility":"Public","body":"__from_object_params__(params)\nself\n"}},{"html_id":"attributes-instance-method","name":"attributes","doc":"Returns a `Hash` of all attribute values","summary":"<p>Returns a <code>Hash</code> of all attribute values</p>","abstract":false,"def":{"name":"attributes","visibility":"Public","body":"{:id => @id}"}},{"html_id":"attributes_tuple-instance-method","name":"attributes_tuple","doc":"Returns a `NamedTuple` of all attribute values.","summary":"<p>Returns a <code>NamedTuple</code> of all attribute values.</p>","abstract":false,"def":{"name":"attributes_tuple","visibility":"Public","body":"{id: @id}"}},{"html_id":"id:String?-instance-method","name":"id","doc":"Default primary key","summary":"<p>Default primary key</p>","abstract":false,"def":{"name":"id","return_type":"String | Nil","visibility":"Public","body":"@id"}},{"html_id":"id=(id:String?)-instance-method","name":"id=","doc":"Default primary key","summary":"<p>Default primary key</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String | Nil"}],"args_string":"(id : String?)","args_html":"(id : String?)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String | Nil"}],"visibility":"Public","body":"@id = id"}},{"html_id":"id_change:Tuple(String??,String??)?-instance-method","name":"id_change","doc":"Returns a Tuple of the previous and the current\nvalue of an instance variable if it has changed","summary":"<p>Returns a Tuple of the previous and the current value of an instance variable if it has changed</p>","abstract":false,"def":{"name":"id_change","return_type":"Tuple(String | Nil | ::Nil, String | Nil | ::Nil) | ::Nil","visibility":"Public","body":"if id_changed?\n  {@id_was, @id}\nend"}},{"html_id":"id_changed?:Bool-instance-method","name":"id_changed?","abstract":false,"def":{"name":"id_changed?","visibility":"Public","body":"@id_changed"}},{"html_id":"id_default:String?-instance-method","name":"id_default","doc":"`id`'s default value","summary":"<p><code><a href=\"../RethinkORM/Base.html#id%3AString%3F-instance-method\">#id</a></code>'s default value</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/base.cr","line_number":37,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L37"},"def":{"name":"id_default","return_type":"String | ::Nil","visibility":"Public","body":"nil"}},{"html_id":"id_present?:Bool-instance-method","name":"id_present?","doc":"Default primary key","summary":"<p>Default primary key</p>","abstract":false,"def":{"name":"id_present?","return_type":"Bool","visibility":"Public","body":"@id_present"}},{"html_id":"id_was:String|Nil|Nil-instance-method","name":"id_was","abstract":false,"def":{"name":"id_was","return_type":"String | Nil | Nil","visibility":"Public","body":"@id_was"}},{"html_id":"id_will_change!:Nil-instance-method","name":"id_will_change!","doc":"Include `id` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Base.html#id%3AString%3F-instance-method\">#id</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"def":{"name":"id_will_change!","return_type":"Nil","visibility":"Public","body":"@id_changed = true\n@id_was = @id.dup\n"}},{"html_id":"persistent_attributes-instance-method","name":"persistent_attributes","doc":"Returns a `Hash` of all attributes that can be persisted.","summary":"<p>Returns a <code>Hash</code> of all attributes that can be persisted.</p>","abstract":false,"def":{"name":"persistent_attributes","visibility":"Public","body":"{:id => @id}"}},{"html_id":"uuid_generator=(generator:Class)-instance-method","name":"uuid_generator=","doc":"Allow user defined uuid generator","summary":"<p>Allow user defined uuid generator</p>","abstract":false,"args":[{"name":"generator","external_name":"generator","restriction":"Class"}],"args_string":"(generator : Class)","args_html":"(generator : Class)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/base.cr#L20"},"def":{"name":"uuid_generator=","args":[{"name":"generator","external_name":"generator","restriction":"Class"}],"visibility":"Public","body":"@@uuid_generator = generator"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","path":"RethinkORM/Changefeed.html","kind":"class","full_name":"RethinkORM::Changefeed(T)","name":"Changefeed","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"},{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":6,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L6"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"}],"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Changefeed/Raw","kind":"class","full_name":"RethinkORM::Changefeed::Raw","name":"Raw"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":"Wraps the Changefeed iterator and parses events","summary":"<p>Wraps the Changefeed iterator and parses events</p>","constructors":[{"html_id":"new(iterator:Iterator(RethinkDB::QueryResult))-class-method","name":"new","abstract":false,"args":[{"name":"iterator","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"args_string":"(iterator : Iterator(RethinkDB::QueryResult))","args_html":"(iterator : Iterator(RethinkDB::QueryResult))","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":29,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L29"},"def":{"name":"new","args":[{"name":"iterator","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"visibility":"Public","body":"_ = Changefeed(T).allocate\n_.initialize(iterator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":40,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L40"},"def":{"name":"next","visibility":"Public","body":"begin\n  result = wrapped_next\n  if result.is_a?(Iterator::Stop)\n    stop\n  else\n    parse_changes(result)\n  end\nrescue Channel::ClosedError\n  raise(Error::ChangefeedClosed.new)\nrescue e\n  if e.message =~ (/Changefeed aborted/)\n    stop\n  else\n    raise(e)\n  end\nend"}},{"html_id":"stop-instance-method","name":"stop","doc":"Shortcut for `Iterator::Stop::INSTANCE`, to signal that there are no more elements in an iterator.","summary":"<p>Shortcut for <code>Iterator::Stop::INSTANCE</code>, to signal that there are no more elements in an iterator.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":32,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L32"},"def":{"name":"stop","visibility":"Public","body":"begin\n  @iterator.stop\nrescue Channel::ClosedError\nend\nsuper()\n"}}],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Changefeed/Change","path":"RethinkORM/Changefeed/Change.html","kind":"struct","full_name":"RethinkORM::Changefeed::Change(T)","name":"Change","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"rethinkdb-orm/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"rethinkdb-orm/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"rethinkdb-orm/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L13"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"rethinkdb-orm/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed(T)","name":"Changefeed"},"constructors":[{"html_id":"new(value:T,event:Event)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"},{"name":"event","external_name":"event","restriction":"Event"}],"args_string":"(value : T, event : Event)","args_html":"(value : T, event : <a href=\"../../RethinkORM/Changefeed/Event.html\">Event</a>)","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L13"},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"T"},{"name":"event","external_name":"event","restriction":"Event"}],"visibility":"Public","body":"_ = Change(T).allocate\n_.initialize(value, event)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":17,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L17"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L13"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@value.clone, @event.clone)"}},{"html_id":"copy_with(value_value=@value,event_event=@event)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_value","default_value":"@value","external_name":"value","restriction":""},{"name":"_event","default_value":"@event","external_name":"event","restriction":""}],"args_string":"(value _value = @value, event _event = @event)","args_html":"(value _value = @value, event _event = @event)","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L13"},"def":{"name":"copy_with","args":[{"name":"_value","default_value":"@value","external_name":"value","restriction":""},{"name":"_event","default_value":"@event","external_name":"event","restriction":""}],"visibility":"Public","body":"self.class.new(_value, _event)"}},{"html_id":"created?-instance-method","name":"created?","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":18,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L18"},"def":{"name":"created?","visibility":"Public","body":"event.created?"}},{"html_id":"deleted?-instance-method","name":"deleted?","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":18,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L18"},"def":{"name":"deleted?","visibility":"Public","body":"event.deleted?"}},{"html_id":"event:Event-instance-method","name":"event","abstract":false,"def":{"name":"event","return_type":"Event","visibility":"Public","body":"@event"}},{"html_id":"updated?-instance-method","name":"updated?","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":18,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L18"},"def":{"name":"updated?","visibility":"Public","body":"event.updated?"}},{"html_id":"value:T-instance-method","name":"value","abstract":false,"def":{"name":"value","return_type":"T","visibility":"Public","body":"@value"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Changefeed/Event","path":"RethinkORM/Changefeed/Event.html","kind":"enum","full_name":"RethinkORM::Changefeed::Event","name":"Event","abstract":false,"ancestors":[{"html_id":"rethinkdb-orm/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"rethinkdb-orm/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"rethinkdb-orm/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":7,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L7"}],"repository_name":"rethinkdb-orm","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Created","name":"Created","value":"0"},{"id":"Updated","name":"Updated","value":"1"},{"id":"Deleted","name":"Deleted","value":"2"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed(T)","name":"Changefeed"},"instance_methods":[{"html_id":"created?-instance-method","name":"created?","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":8,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L8"},"def":{"name":"created?","visibility":"Public","body":"self == Created"}},{"html_id":"deleted?-instance-method","name":"deleted?","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":10,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L10"},"def":{"name":"deleted?","visibility":"Public","body":"self == Deleted"}},{"html_id":"updated?-instance-method","name":"updated?","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L9"},"def":{"name":"updated?","visibility":"Public","body":"self == Updated"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Changefeed/Raw","path":"RethinkORM/Changefeed/Raw.html","kind":"class","full_name":"RethinkORM::Changefeed::Raw","name":"Raw","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed","name":"Changefeed"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed","name":"Changefeed"},{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"},{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":80,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L80"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed(T)","name":"Changefeed"},"doc":"Raw changefeed on a table","summary":"<p>Raw changefeed on a table</p>","constructors":[{"html_id":"new(iterator:Iterator(RethinkDB::QueryResult))-class-method","name":"new","abstract":false,"args":[{"name":"iterator","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"args_string":"(iterator : Iterator(RethinkDB::QueryResult))","args_html":"(iterator : Iterator(RethinkDB::QueryResult))","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":29,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/changefeed.cr#L29"},"def":{"name":"new","args":[{"name":"iterator","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(iterator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]},{"html_id":"rethinkdb-orm/RethinkORM/Collection","path":"RethinkORM/Collection.html","kind":"class","full_name":"RethinkORM::Collection(T)","name":"Collection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/collection.cr#L4"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"constructors":[{"html_id":"new(iterator:Iterator(RethinkDB::QueryResult)|RethinkDB::QueryResult)-class-method","name":"new","abstract":false,"args":[{"name":"iterator","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult"}],"args_string":"(iterator : Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult)","args_html":"(iterator : Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult)","location":{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":11,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/collection.cr#L11"},"def":{"name":"new","args":[{"name":"iterator","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult"}],"visibility":"Public","body":"_ = Collection(T).allocate\n_.initialize(iterator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each(*args,**options)-instance-method","name":"each","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":7,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/collection.cr#L7"},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"iterator.each(*args, **options)"}},{"html_id":"each(*args,**options,&)-instance-method","name":"each","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":7,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/collection.cr#L7"},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"visibility":"Public","body":"iterator.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Connection","path":"RethinkORM/Connection.html","kind":"class","full_name":"RethinkORM::Connection","name":"Connection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/connection.cr","line_number":18,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L18"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)"}],"extended_modules":[{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"class_methods":[{"html_id":"db-class-method","name":"db","abstract":false,"location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":29,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L29"},"def":{"name":"db","visibility":"Public","body":"@@resource_lock.synchronize do\n  connection = @@db\n  if (@@resource_check && connection) && (!connection.closed?)\n    return connection\n  end\n  begin\n    connection = Retriable.retry(max_attempts: settings.retry_attempts, on: Socket::ConnectError, on_retry: ->(_e : Exception, attempt : Int32, _t : Time::Span, _i : Time::Span) do\n      Log.warn do\n        \"attempt #{attempt} connecting to #{settings.host}:#{settings.port}\"\n      end\n    end) do\n      RethinkDB::Connection.new(host: settings.host, port: settings.port, db: settings.db, user: settings.user, password: settings.password, max_retry_interval: settings.retry_interval, max_retry_attempts: settings.retry_attempts)\n    end\n  rescue e : Socket::ConnectError\n    raise(Error::ConnectError.new(\"failed to connect to #{settings.host}:#{settings.port} after #{settings.retry_attempts} retries\"))\n  end\n  @@db = connection\n  ensure_resources!(connection)\n  connection\nend"}},{"html_id":"raw(**options,&)-class-method","name":"raw","doc":"Passes the query builder to the block.\n\nAuto creates the database if its not already present.\nThe block defined query is run and raw results returned.","summary":"<p>Passes the query builder to the block.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":68,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L68"},"def":{"name":"raw","double_splat":{"name":"options","external_name":"options","restriction":""},"yields":1,"visibility":"Public","body":"query = yield R\nRetriable.retry(max_attempts: settings.query_retries, on: IO::Error, on_retry: ->(_e : Exception, attempt : Int32, _t : Time::Span, _i : Time::Span) do\n  Log.warn do\n    \"attempt #{attempt} retrying query\"\n  end\nend) do\n  query.run(self.db, **options)\nend\n"}},{"html_id":"raw_json(json:String,**options,&)-class-method","name":"raw_json","doc":"Passes query builder and datum term of supplied raw json string\n","summary":"<p>Passes query builder and datum term of supplied raw json string</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":"String"}],"args_string":"(json : String, **options, &)","args_html":"(json : String, **options, &)","location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":83,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/connection.cr#L83"},"def":{"name":"raw_json","args":[{"name":"json","external_name":"json","restriction":"String"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"yields":2,"visibility":"Public","body":"raw(**options) do |q|\n  yield q, q.json(json)\nend"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Error","path":"RethinkORM/Error.html","kind":"class","full_name":"RethinkORM::Error","name":"Error","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":1,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L1"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Error/ChangefeedClosed","kind":"class","full_name":"RethinkORM::Error::ChangefeedClosed","name":"ChangefeedClosed"},{"html_id":"rethinkdb-orm/RethinkORM/Error/ConnectError","kind":"class","full_name":"RethinkORM::Error::ConnectError","name":"ConnectError"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DatabaseError","kind":"class","full_name":"RethinkORM::Error::DatabaseError","name":"DatabaseError"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentExists","kind":"class","full_name":"RethinkORM::Error::DocumentExists","name":"DocumentExists"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentInvalid","kind":"class","full_name":"RethinkORM::Error::DocumentInvalid","name":"DocumentInvalid"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotFound","kind":"class","full_name":"RethinkORM::Error::DocumentNotFound","name":"DocumentNotFound"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotSaved","kind":"class","full_name":"RethinkORM::Error::DocumentNotSaved","name":"DocumentNotSaved"},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockInvalidOp","kind":"class","full_name":"RethinkORM::Error::LockInvalidOp","name":"LockInvalidOp"},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockLost","kind":"class","full_name":"RethinkORM::Error::LockLost","name":"LockLost"},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockUnavailable","kind":"class","full_name":"RethinkORM::Error::LockUnavailable","name":"LockUnavailable"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"constructors":[{"html_id":"new(message:String?=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"message","default_value":"\"\"","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(message : String? = \"\")","args_html":"(message : String? = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L4"},"def":{"name":"new","args":[{"name":"message","default_value":"\"\"","external_name":"message","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"message:String?-instance-method","name":"message","abstract":false,"location":{"filename":"src/rethinkdb-orm/error.cr","line_number":2,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L2"},"def":{"name":"message","visibility":"Public","body":"@message"}}],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Error/ChangefeedClosed","path":"RethinkORM/Error/ChangefeedClosed.html","kind":"class","full_name":"RethinkORM::Error::ChangefeedClosed","name":"ChangefeedClosed","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":8,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L8"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"}},{"html_id":"rethinkdb-orm/RethinkORM/Error/ConnectError","path":"RethinkORM/Error/ConnectError.html","kind":"class","full_name":"RethinkORM::Error::ConnectError","name":"ConnectError","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":58,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L58"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"}},{"html_id":"rethinkdb-orm/RethinkORM/Error/DatabaseError","path":"RethinkORM/Error/DatabaseError.html","kind":"class","full_name":"RethinkORM::Error::DatabaseError","name":"DatabaseError","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":55,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L55"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"}},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentExists","path":"RethinkORM/Error/DocumentExists.html","kind":"class","full_name":"RethinkORM::Error::DocumentExists","name":"DocumentExists","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":11,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L11"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"}},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentInvalid","path":"RethinkORM/Error/DocumentInvalid.html","kind":"class","full_name":"RethinkORM::Error::DocumentInvalid","name":"DocumentInvalid","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":17,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L17"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"constructors":[{"html_id":"new(model,message=nil)-class-method","name":"new","abstract":false,"args":[{"name":"model","external_name":"model","restriction":""},{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"args_string":"(model, message = nil)","args_html":"(model, message = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":21,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L21"},"def":{"name":"new","args":[{"name":"model","external_name":"model","restriction":""},{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(model, message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"errors:Array(NamedTuple(field:Symbol,message:String))-instance-method","name":"errors","abstract":false,"location":{"filename":"src/rethinkdb-orm/error.cr","line_number":19,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L19"},"def":{"name":"errors","return_type":"Array(NamedTuple(field: Symbol, message: String))","visibility":"Public","body":"@errors"}},{"html_id":"inspect_errors-instance-method","name":"inspect_errors","summary":"<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../../RethinkORM/Error/DocumentInvalid.html#errors%3AArray%28NamedTuple%28field%3ASymbol%2Cmessage%3AString%29%29-instance-method\">#errors</a></code> instead</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/error.cr","line_number":47,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L47"},"def":{"name":"inspect_errors","visibility":"Public","body":"errors"}},{"html_id":"model:RethinkORM::Base-instance-method","name":"model","abstract":false,"location":{"filename":"src/rethinkdb-orm/error.cr","line_number":18,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L18"},"def":{"name":"model","return_type":"RethinkORM::Base","visibility":"Public","body":"@model"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotFound","path":"RethinkORM/Error/DocumentNotFound.html","kind":"class","full_name":"RethinkORM::Error::DocumentNotFound","name":"DocumentNotFound","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":14,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L14"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"}},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotSaved","path":"RethinkORM/Error/DocumentNotSaved.html","kind":"class","full_name":"RethinkORM::Error::DocumentNotSaved","name":"DocumentNotSaved","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":52,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L52"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"}},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockInvalidOp","path":"RethinkORM/Error/LockInvalidOp.html","kind":"class","full_name":"RethinkORM::Error::LockInvalidOp","name":"LockInvalidOp","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":61,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L61"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"constructors":[{"html_id":"new(key:String,locked:Bool)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"locked","external_name":"locked","restriction":"Bool"}],"args_string":"(key : String, locked : Bool)","args_html":"(key : String, locked : Bool)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":62,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L62"},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"locked","external_name":"locked","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, locked)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockLost","path":"RethinkORM/Error/LockLost.html","kind":"class","full_name":"RethinkORM::Error::LockLost","name":"LockLost","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":67,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L67"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"constructors":[{"html_id":"new(key:String)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : String)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":68,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L68"},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockUnavailable","path":"RethinkORM/Error/LockUnavailable.html","kind":"class","full_name":"RethinkORM::Error::LockUnavailable","name":"LockUnavailable","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":73,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L73"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"constructors":[{"html_id":"new(key:String)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : String)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":74,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/error.cr#L74"},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]},{"html_id":"rethinkdb-orm/RethinkORM/IdGenerator","path":"RethinkORM/IdGenerator.html","kind":"class","full_name":"RethinkORM::IdGenerator","name":"IdGenerator","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":10,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/id_generator.cr#L10"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENCODING","name":"ENCODING","value":"{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '-', '_', '~'}"},{"id":"RAND_GEN","name":"RAND_GEN","value":"seq(max: 2_u32 ** RAND_LEN)"},{"id":"RAND_LEN","name":"RAND_LEN","value":"30","doc":"30-bits of entropy","summary":"<p>30-bits of entropy</p>"},{"id":"TIME_OFFSET","name":"TIME_OFFSET","value":"(Time.utc(2014, 1, 1)).to_unix","doc":"Coverage to 2050 in 30 bits","summary":"<p>Coverage to 2050 in 30 bits</p>"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":"Generates time-sortable, collision resistant primary keys.\n\nProvides suitable performance with local, high-frequency batch insertions and\ndistributed operation will low collision probability. Generated ID's are in\nthe form `<prefix>-<postfix>` where prefix defaults to the table name and\npostfix is a lexicographically sortable 10 character unique identifier.","summary":"<p>Generates time-sortable, collision resistant primary keys.</p>","class_methods":[{"html_id":"next(table_name:String)-class-method","name":"next","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":"String"}],"args_string":"(table_name : String)","args_html":"(table_name : String)","location":{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":68,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/id_generator.cr#L68"},"def":{"name":"next","args":[{"name":"table_name","external_name":"table_name","restriction":"String"}],"visibility":"Public","body":"\"#{table_name}-#{postfix}\""}},{"html_id":"next(model)-class-method","name":"next","abstract":false,"args":[{"name":"model","external_name":"model","restriction":""}],"args_string":"(model)","args_html":"(model)","location":{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":64,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/id_generator.cr#L64"},"def":{"name":"next","args":[{"name":"model","external_name":"model","restriction":""}],"visibility":"Public","body":"\"#{model.table_name}-#{postfix}\""}},{"html_id":"postfix-class-method","name":"postfix","abstract":false,"location":{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":72,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/utils/id_generator.cr#L72"},"def":{"name":"postfix","visibility":"Public","body":"String.build do |io|\n  time = Time.utc.to_unix - TIME_OFFSET\n  rand = RAND_GEN.receive\n  (((time << RAND_LEN) | rand).digits(ENCODING.size)).reverse_each do |ord|\n    io << ENCODING[ord]\n  end\nend"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Index","path":"RethinkORM/Index.html","kind":"module","full_name":"RethinkORM::Index","name":"Index","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/index.cr","line_number":1,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/index.cr#L1"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"macros":[{"html_id":"secondary_index(field)-macro","name":"secondary_index","doc":"TODO: Add support for compound and multi indices","summary":"<p><span class=\"flag orange\">TODO</span>  Add support for compound and multi indices</p>","abstract":false,"args":[{"name":"field","external_name":"field","restriction":""}],"args_string":"(field)","args_html":"(field)","location":{"filename":"src/rethinkdb-orm/index.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/index.cr#L3"},"def":{"name":"secondary_index","args":[{"name":"field","external_name":"field","restriction":""}],"visibility":"Public","body":"    RethinkORM::Base::INDICES << \n{ field: \n{{ field.id.stringify }}\n, table: @@table_name }\n  \n"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Lock","path":"RethinkORM/Lock.html","kind":"class","full_name":"RethinkORM::Lock","name":"Lock","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"},{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},{"html_id":"rethinkdb-orm/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"rethinkdb-orm/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CALLBACKS","name":"CALLBACKS","value":"{before_save: [] of Nil, after_save: [] of Nil, before_create: [] of Nil, after_create: [] of Nil, before_update: [] of Nil, after_update: [] of Nil, before_destroy: [] of Nil, after_destroy: [] of Nil}","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>"}],"extended_modules":[{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"}],"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Lock/Reentrant","kind":"class","full_name":"RethinkORM::Lock::Reentrant","name":"Reentrant"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","class_methods":[{"html_id":"attributes:Array(Symbol)-class-method","name":"attributes","doc":"Returns all attribute keys.","summary":"<p>Returns all attribute keys.</p>","abstract":false,"def":{"name":"attributes","return_type":"Array(Symbol)","visibility":"Public","body":"[:key, :instance_token, :expires_at, :id]"}},{"html_id":"expired-class-method","name":"expired","doc":"Returns all expired locks\n","summary":"<p>Returns all expired locks</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":48,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L48"},"def":{"name":"expired","visibility":"Public","body":"Lock.where do |d|\n  (r.epoch_time(d[:expires_at])) < r.now\nend"}},{"html_id":"find(key)-class-method","name":"find","doc":"Hash a key\n","summary":"<p>Hash a key</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":56,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L56"},"def":{"name":"find","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"super(Digest::SHA1.base64digest(key.to_s))"}},{"html_id":"table_name-class-method","name":"table_name","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"table_name","visibility":"Public","body":"@@table_name"}}],"constructors":[{"html_id":"from_json(string_or_io:String|IO,trusted:Bool=false):self-class-method","name":"from_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = false) : self","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"from_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"(super(string_or_io)).tap(&.after_initialize(trusted: trusted))"}},{"html_id":"from_json(string_or_io:String|IO,root:String,trusted:Bool=false):self-class-method","name":"from_json","doc":"Deserializes the given JSON in *string_or_io* into\nan instance of `self`, assuming the JSON consists\nof an JSON object with key *root*, and whose value is\nthe value to deserialize. Will not deserialise from\nfields with mass_assign: false\n\n```\nclass User < ActiveModel::Model\n  attribute name : String\n  attribute google_id : UUID, mass_assign: false\nend\n\nUser.from_json(%({\"main\": {\"name\": \"Jason\", \"google_id\": \"f6f70bfb-c882-446d-8758-7ce47db39620\"}}), root: \"main\") # => #<User:0x103131b20 @name=\"Jason\">\n```","summary":"<p>Deserializes the given JSON in <em>string_or_io</em> into an instance of <code>self</code>, assuming the JSON consists of an JSON object with key <em>root</em>, and whose value is the value to deserialize.</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, root : String, trusted : Bool = false) : self","args_html":"(string_or_io : String | IO, root : String, trusted : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"from_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"(super(string_or_io, root)).tap(&.after_initialize(trusted: trusted))"}},{"html_id":"from_trusted_json(string_or_io:String|IO,root:String):self-class-method","name":"from_trusted_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"}],"args_string":"(string_or_io : String | IO, root : String) : self","args_html":"(string_or_io : String | IO, root : String) : <span class=\"k\">self</span>","def":{"name":"from_trusted_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"}],"return_type":"self","visibility":"Public","body":"self.from_json(string_or_io, root, true)"}},{"html_id":"from_trusted_json(string_or_io:String|IO):self-class-method","name":"from_trusted_json","doc":"Serialize from a trusted JSON source","summary":"<p>Serialize from a trusted JSON source</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : self","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","def":{"name":"from_trusted_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"return_type":"self","visibility":"Public","body":"self.from_json(string_or_io, trusted: true)"}},{"html_id":"from_trusted_yaml(string_or_io:String|IO):self-class-method","name":"from_trusted_yaml","doc":"Serialize from a trusted YAML source","summary":"<p>Serialize from a trusted YAML source</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : self","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","def":{"name":"from_trusted_yaml","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"return_type":"self","visibility":"Public","body":"self.from_yaml(string_or_io, trusted: true)"}},{"html_id":"from_yaml(string_or_io:String|IO,trusted:Bool=false):self-class-method","name":"from_yaml","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = false) : self","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"from_yaml","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"(super(string_or_io)).tap(&.after_initialize(trusted: trusted))"}},{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(key:String,expire:Time::Span?=nil,timeout:Time::Span?=nil,instance_token:String=Lock.new_instance_token)-class-method","name":"new","doc":"Reset instance token if it's loaded and expired?","summary":"<p>Reset instance token if it's loaded and expired?</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"expire","default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"args_string":"(key : String, expire : Time::Span? = nil, timeout : Time::Span? = nil, instance_token : String = Lock.new_instance_token)","args_html":"(key : String, expire : Time::Span? = <span class=\"n\">nil</span>, timeout : Time::Span? = <span class=\"n\">nil</span>, instance_token : String = <span class=\"t\">Lock</span>.new_instance_token)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":61,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L61"},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"expire","default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, expire, timeout, instance_token)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(key:String|ActiveModel::Model::None=::ActiveModel::Model::None.new,instance_token:String|ActiveModel::Model::None=::ActiveModel::Model::None.new,expires_at:Time|ActiveModel::Model::None=::ActiveModel::Model::None.new,id:String?|ActiveModel::Model::None=::ActiveModel::Model::None.new)-class-method","name":"new","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"key","default_value":"::ActiveModel::Model::None.new","external_name":"key","restriction":"String | ::ActiveModel::Model::None"},{"name":"instance_token","default_value":"::ActiveModel::Model::None.new","external_name":"instance_token","restriction":"String | ::ActiveModel::Model::None"},{"name":"expires_at","default_value":"::ActiveModel::Model::None.new","external_name":"expires_at","restriction":"Time | ::ActiveModel::Model::None"},{"name":"id","default_value":"::ActiveModel::Model::None.new","external_name":"id","restriction":"String | Nil | ::ActiveModel::Model::None"}],"args_string":"(key : String | ActiveModel::Model::None = ::ActiveModel::Model::None.new, instance_token : String | ActiveModel::Model::None = ::ActiveModel::Model::None.new, expires_at : Time | ActiveModel::Model::None = ::ActiveModel::Model::None.new, id : String? | ActiveModel::Model::None = ::ActiveModel::Model::None.new)","args_html":"(key : String | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>, instance_token : String | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>, expires_at : Time | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>, id : String? | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>)","def":{"name":"new","args":[{"name":"key","default_value":"::ActiveModel::Model::None.new","external_name":"key","restriction":"String | ::ActiveModel::Model::None"},{"name":"instance_token","default_value":"::ActiveModel::Model::None.new","external_name":"instance_token","restriction":"String | ::ActiveModel::Model::None"},{"name":"expires_at","default_value":"::ActiveModel::Model::None.new","external_name":"expires_at","restriction":"Time | ::ActiveModel::Model::None"},{"name":"id","default_value":"::ActiveModel::Model::None.new","external_name":"id","restriction":"String | Nil | ::ActiveModel::Model::None"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, instance_token, expires_at, id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-class-method","name":"new","doc":"Initialize RethinkORM::Lock from `HTTP::Params`.","summary":"<p>Initialize RethinkORM::Lock from <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","def":{"name":"new","args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"after_create-instance-method","name":"after_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"after_create","visibility":"Public","body":"__after_create"}},{"html_id":"after_destroy-instance-method","name":"after_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"after_destroy","visibility":"Public","body":"__after_destroy"}},{"html_id":"after_initialize(trusted:Bool)-instance-method","name":"after_initialize","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"trusted","external_name":"trusted","restriction":"Bool"}],"args_string":"(trusted : Bool)","args_html":"(trusted : Bool)","def":{"name":"after_initialize","args":[{"name":"trusted","external_name":"trusted","restriction":"Bool"}],"visibility":"Public","body":"if !trusted\n  @id = nil\nend\napply_defaults\nclear_changes_information\n"}},{"html_id":"after_save-instance-method","name":"after_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"after_save","visibility":"Public","body":"__after_save"}},{"html_id":"after_update-instance-method","name":"after_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"after_update","visibility":"Public","body":"__after_update"}},{"html_id":"apply_defaults-instance-method","name":"apply_defaults","doc":"Generate code to apply default values","summary":"<p>Generate code to apply default values</p>","abstract":false,"def":{"name":"apply_defaults","visibility":"Public","body":"super()"}},{"html_id":"assign_attributes(key:String|Missing=Missing,instance_token:String|Missing=Missing,expires_at:Time|Missing=Missing,id:String?|Missing=Missing)-instance-method","name":"assign_attributes","doc":"Assign to multiple attributes.","summary":"<p>Assign to multiple attributes.</p>","abstract":false,"args":[{"name":"key","default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"},{"name":"id","default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"}],"args_string":"(key : String | Missing = Missing, instance_token : String | Missing = Missing, expires_at : Time | Missing = Missing, id : String? | Missing = Missing)","args_html":"(key : String | Missing = <span class=\"t\">Missing</span>, instance_token : String | Missing = <span class=\"t\">Missing</span>, expires_at : Time | Missing = <span class=\"t\">Missing</span>, id : String? | Missing = <span class=\"t\">Missing</span>)","def":{"name":"assign_attributes","args":[{"name":"key","default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"},{"name":"id","default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"}],"visibility":"Public","body":"if key.is_a?(Missing)\nelse\n  self.key = key\nend\nif instance_token.is_a?(Missing)\nelse\n  self.instance_token = instance_token\nend\nif expires_at.is_a?(Missing)\nelse\n  self.expires_at = expires_at\nend\n"}},{"html_id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","name":"assign_attributes","doc":"Assign to mulitple attributes via `HTTP::Params`.","summary":"<p>Assign to mulitple attributes via <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","def":{"name":"assign_attributes","args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"visibility":"Public","body":"__from_object_params__(params)\nself\n"}},{"html_id":"assign_attributes_from_json(json,root:String)-instance-method","name":"assign_attributes_from_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"args_string":"(json, root : String)","args_html":"(json, root : String)","def":{"name":"assign_attributes_from_json","args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_json(json, root: root)\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"assign_attributes_from_json(json)-instance-method","name":"assign_attributes_from_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","def":{"name":"assign_attributes_from_json","args":[{"name":"json","external_name":"json","restriction":""}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_json(json)\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"assign_attributes_from_trusted_json(json,root:String)-instance-method","name":"assign_attributes_from_trusted_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"args_string":"(json, root : String)","args_html":"(json, root : String)","def":{"name":"assign_attributes_from_trusted_json","args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_trusted_json(json, root)\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nif model.id_present? && (self.id != model.id)\n  self.id = model.id\nend\nself\n"}},{"html_id":"assign_attributes_from_trusted_json(json)-instance-method","name":"assign_attributes_from_trusted_json","doc":"Assign each field from JSON if field exists in JSON and has changed in model","summary":"<p>Assign each field from JSON if field exists in JSON and has changed in model</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","def":{"name":"assign_attributes_from_trusted_json","args":[{"name":"json","external_name":"json","restriction":""}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_trusted_json(json)\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nif model.id_present? && (self.id != model.id)\n  self.id = model.id\nend\nself\n"}},{"html_id":"assign_attributes_from_trusted_yaml(yaml)-instance-method","name":"assign_attributes_from_trusted_yaml","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"yaml","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","def":{"name":"assign_attributes_from_trusted_yaml","args":[{"name":"yaml","external_name":"yaml","restriction":""}],"visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_trusted_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nif model.id_present? && (self.id != model.id)\n  self.id = model.id\nend\nself\n"}},{"html_id":"assign_attributes_from_yaml(yaml)-instance-method","name":"assign_attributes_from_yaml","doc":"Uses the YAML parser as JSON is valid YAML","summary":"<p>Uses the YAML parser as JSON is valid YAML</p>","abstract":false,"args":[{"name":"yaml","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","def":{"name":"assign_attributes_from_yaml","args":[{"name":"yaml","external_name":"yaml","restriction":""}],"visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"attributes-instance-method","name":"attributes","doc":"Returns a `Hash` of all attribute values","summary":"<p>Returns a <code>Hash</code> of all attribute values</p>","abstract":false,"def":{"name":"attributes","visibility":"Public","body":"{:key => @key, :instance_token => @instance_token, :expires_at => @expires_at, :id => @id}"}},{"html_id":"attributes_tuple-instance-method","name":"attributes_tuple","doc":"Returns a `NamedTuple` of all attribute values.","summary":"<p>Returns a <code>NamedTuple</code> of all attribute values.</p>","abstract":false,"def":{"name":"attributes_tuple","visibility":"Public","body":"{key: @key, instance_token: @instance_token, expires_at: @expires_at, id: @id}"}},{"html_id":"before_create-instance-method","name":"before_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"before_create","visibility":"Public","body":"__before_create"}},{"html_id":"before_destroy-instance-method","name":"before_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"before_destroy","visibility":"Public","body":"__before_destroy"}},{"html_id":"before_save-instance-method","name":"before_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"before_save","visibility":"Public","body":"__before_save"}},{"html_id":"before_update-instance-method","name":"before_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"before_update","visibility":"Public","body":"__before_update"}},{"html_id":"changed?-instance-method","name":"changed?","doc":"Check if any attributes have changed.","summary":"<p>Check if any attributes have changed.</p>","abstract":false,"def":{"name":"changed?","visibility":"Public","body":"modified = false\nif @key_changed\n  modified = true\nend\nif @instance_token_changed\n  modified = true\nend\nif @expires_at_changed\n  modified = true\nend\nif @id_changed\n  modified = true\nend\nmodified\n"}},{"html_id":"changed_attributes-instance-method","name":"changed_attributes","doc":"Returns a `Hash` with all changed attributes.","summary":"<p>Returns a <code>Hash</code> with all changed attributes.</p>","abstract":false,"def":{"name":"changed_attributes","visibility":"Public","body":"all = attributes\nif @key_changed\nelse\n  all.delete(:key)\nend\nif @instance_token_changed\nelse\n  all.delete(:instance_token)\nend\nif @expires_at_changed\nelse\n  all.delete(:expires_at)\nend\nif @id_changed\nelse\n  all.delete(:id)\nend\nall\n"}},{"html_id":"changed_json(io:IO):Nil-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","def":{"name":"changed_json","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nall.to_json(io)\n"}},{"html_id":"changed_json:String-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"def":{"name":"changed_json","return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_json(string)\nend"}},{"html_id":"changed_yaml(io:IO):Nil-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","def":{"name":"changed_yaml","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nall.to_yaml(io)\n"}},{"html_id":"changed_yaml:String-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"def":{"name":"changed_yaml","return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_yaml(string)\nend"}},{"html_id":"clear_changes_information-instance-method","name":"clear_changes_information","doc":"Reset changes for all attributes.","summary":"<p>Reset changes for all attributes.</p>","abstract":false,"def":{"name":"clear_changes_information","visibility":"Public","body":"@key_changed = false\n@key_was = nil\n@instance_token_changed = false\n@instance_token_was = nil\n@expires_at_changed = false\n@expires_at_was = nil\n@id_changed = false\n@id_was = nil\nnil\n"}},{"html_id":"expire:Time::Span-instance-method","name":"expire","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":35,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L35"},"def":{"name":"expire","return_type":"Time::Span","visibility":"Public","body":"@expire"}},{"html_id":"expire=(expire:Time::Span)-instance-method","name":"expire=","abstract":false,"args":[{"name":"expire","external_name":"expire","restriction":"Time::Span"}],"args_string":"(expire : Time::Span)","args_html":"(expire : Time::Span)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":35,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L35"},"def":{"name":"expire=","args":[{"name":"expire","external_name":"expire","restriction":"Time::Span"}],"visibility":"Public","body":"@expire = expire"}},{"html_id":"expires_at:Time-instance-method","name":"expires_at","doc":"`expires_at` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#expires_at%3ATime-instance-method\">#expires_at</a></code> getter</p>","abstract":false,"def":{"name":"expires_at","return_type":"Time","visibility":"Public","body":"__temp_73 = @expires_at\nif __temp_73.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock#expires_at : Time\"))\nend\n__temp_73\n"}},{"html_id":"expires_at=(value:Time)-instance-method","name":"expires_at=","doc":"`expires_at` setter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#expires_at%3ATime-instance-method\">#expires_at</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Time"}],"args_string":"(value : Time)","args_html":"(value : Time)","def":{"name":"expires_at=","args":[{"name":"value","external_name":"value","restriction":"Time"}],"visibility":"Public","body":"if (!@expires_at_changed) && (@expires_at != value)\n  @expires_at_changed = true\n  @expires_at_was = @expires_at\nend\n@expires_at = value\n"}},{"html_id":"expires_at?:Time?-instance-method","name":"expires_at?","abstract":false,"def":{"name":"expires_at?","return_type":"Time | ::Nil","visibility":"Public","body":"@expires_at"}},{"html_id":"expires_at_change:Tuple(Time?,Time?)?-instance-method","name":"expires_at_change","doc":"Returns a Tuple of the previous and the current\nvalue of an instance variable if it has changed","summary":"<p>Returns a Tuple of the previous and the current value of an instance variable if it has changed</p>","abstract":false,"def":{"name":"expires_at_change","return_type":"Tuple(Time | ::Nil, Time | ::Nil) | ::Nil","visibility":"Public","body":"if expires_at_changed?\n  {@expires_at_was, @expires_at}\nend"}},{"html_id":"expires_at_changed?:Bool-instance-method","name":"expires_at_changed?","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"expires_at_changed?","visibility":"Public","body":"@expires_at_changed"}},{"html_id":"expires_at_default:Time-instance-method","name":"expires_at_default","doc":"`expires_at`'s default value","summary":"<p><code><a href=\"../RethinkORM/Lock.html#expires_at%3ATime-instance-method\">#expires_at</a></code>'s default value</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":24,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L24"},"def":{"name":"expires_at_default","return_type":"Time","visibility":"Public","body":"nil"}},{"html_id":"expires_at_present?:Bool-instance-method","name":"expires_at_present?","abstract":false,"def":{"name":"expires_at_present?","return_type":"Bool","visibility":"Public","body":"@expires_at_present"}},{"html_id":"expires_at_was:Time?-instance-method","name":"expires_at_was","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"expires_at_was","return_type":"Time | Nil","visibility":"Public","body":"@expires_at_was"}},{"html_id":"expires_at_will_change!:Nil-instance-method","name":"expires_at_will_change!","doc":"Include `expires_at` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Lock.html#expires_at%3ATime-instance-method\">#expires_at</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"def":{"name":"expires_at_will_change!","return_type":"Nil","visibility":"Public","body":"@expires_at_changed = true\n@expires_at_was = @expires_at.dup\n"}},{"html_id":"id:String?-instance-method","name":"id","doc":"`id` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#id%3AString%3F-instance-method\">#id</a></code> getter</p>","abstract":false,"def":{"name":"id","return_type":"String | Nil","visibility":"Public","body":"@id"}},{"html_id":"id=(value:String?)-instance-method","name":"id=","doc":"`id` setter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#id%3AString%3F-instance-method\">#id</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String | Nil"}],"args_string":"(value : String?)","args_html":"(value : String?)","def":{"name":"id=","args":[{"name":"value","external_name":"value","restriction":"String | Nil"}],"visibility":"Public","body":"if (!@id_changed) && (@id != value)\n  @id_changed = true\n  @id_was = @id\nend\n@id = value\n"}},{"html_id":"instance_token:String-instance-method","name":"instance_token","doc":"`instance_token` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#instance_token%3AString-instance-method\">#instance_token</a></code> getter</p>","abstract":false,"def":{"name":"instance_token","return_type":"String","visibility":"Public","body":"__temp_73 = @instance_token\nif __temp_73.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock#instance_token : String\"))\nend\n__temp_73\n"}},{"html_id":"instance_token=(value:String)-instance-method","name":"instance_token=","doc":"`instance_token` setter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#instance_token%3AString-instance-method\">#instance_token</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"instance_token=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"if (!@instance_token_changed) && (@instance_token != value)\n  @instance_token_changed = true\n  @instance_token_was = @instance_token\nend\n@instance_token = value\n"}},{"html_id":"instance_token?:String?-instance-method","name":"instance_token?","abstract":false,"def":{"name":"instance_token?","return_type":"String | ::Nil","visibility":"Public","body":"@instance_token"}},{"html_id":"instance_token_change:Tuple(String?,String?)?-instance-method","name":"instance_token_change","doc":"Returns a Tuple of the previous and the current\nvalue of an instance variable if it has changed","summary":"<p>Returns a Tuple of the previous and the current value of an instance variable if it has changed</p>","abstract":false,"def":{"name":"instance_token_change","return_type":"Tuple(String | ::Nil, String | ::Nil) | ::Nil","visibility":"Public","body":"if instance_token_changed?\n  {@instance_token_was, @instance_token}\nend"}},{"html_id":"instance_token_changed?:Bool-instance-method","name":"instance_token_changed?","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"instance_token_changed?","visibility":"Public","body":"@instance_token_changed"}},{"html_id":"instance_token_default:String-instance-method","name":"instance_token_default","doc":"`instance_token`'s default value","summary":"<p><code><a href=\"../RethinkORM/Lock.html#instance_token%3AString-instance-method\">#instance_token</a></code>'s default value</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":22,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L22"},"def":{"name":"instance_token_default","return_type":"String","visibility":"Public","body":"nil"}},{"html_id":"instance_token_present?:Bool-instance-method","name":"instance_token_present?","abstract":false,"def":{"name":"instance_token_present?","return_type":"Bool","visibility":"Public","body":"@instance_token_present"}},{"html_id":"instance_token_was:String?-instance-method","name":"instance_token_was","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"instance_token_was","return_type":"String | Nil","visibility":"Public","body":"@instance_token_was"}},{"html_id":"instance_token_will_change!:Nil-instance-method","name":"instance_token_will_change!","doc":"Include `instance_token` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Lock.html#instance_token%3AString-instance-method\">#instance_token</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"def":{"name":"instance_token_will_change!","return_type":"Nil","visibility":"Public","body":"@instance_token_changed = true\n@instance_token_was = @instance_token.dup\n"}},{"html_id":"key:String-instance-method","name":"key","doc":"`key` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#key%3AString-instance-method\">#key</a></code> getter</p>","abstract":false,"def":{"name":"key","return_type":"String","visibility":"Public","body":"__temp_73 = @key\nif __temp_73.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock#key : String\"))\nend\n__temp_73\n"}},{"html_id":"key=(value:String)-instance-method","name":"key=","doc":"Setters\n`key` setter","summary":"<p>Setters <code><a href=\"../RethinkORM/Lock.html#key%3AString-instance-method\">#key</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"key=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"if (!@key_changed) && (@key != value)\n  @key_changed = true\n  @key_was = @key\nend\n@key = value\n"}},{"html_id":"key?:String?-instance-method","name":"key?","doc":"Key is not an index, PKs are 127 chars.","summary":"<p>Key is not an index, PKs are 127 chars.</p>","abstract":false,"def":{"name":"key?","return_type":"String | ::Nil","visibility":"Public","body":"@key"}},{"html_id":"key_change:Tuple(String?,String?)?-instance-method","name":"key_change","doc":"Returns a Tuple of the previous and the current\nvalue of an instance variable if it has changed","summary":"<p>Returns a Tuple of the previous and the current value of an instance variable if it has changed</p>","abstract":false,"def":{"name":"key_change","return_type":"Tuple(String | ::Nil, String | ::Nil) | ::Nil","visibility":"Public","body":"if key_changed?\n  {@key_was, @key}\nend"}},{"html_id":"key_changed?:Bool-instance-method","name":"key_changed?","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"key_changed?","visibility":"Public","body":"@key_changed"}},{"html_id":"key_default:String-instance-method","name":"key_default","doc":"`key`'s default value","summary":"<p><code><a href=\"../RethinkORM/Lock.html#key%3AString-instance-method\">#key</a></code>'s default value</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":20,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L20"},"def":{"name":"key_default","return_type":"String","visibility":"Public","body":"nil"}},{"html_id":"key_present?:Bool-instance-method","name":"key_present?","doc":"Key is not an index, PKs are 127 chars.","summary":"<p>Key is not an index, PKs are 127 chars.</p>","abstract":false,"def":{"name":"key_present?","return_type":"Bool","visibility":"Public","body":"@key_present"}},{"html_id":"key_was:String?-instance-method","name":"key_was","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"key_was","return_type":"String | Nil","visibility":"Public","body":"@key_was"}},{"html_id":"key_will_change!:Nil-instance-method","name":"key_will_change!","doc":"Include `key` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Lock.html#key%3AString-instance-method\">#key</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"def":{"name":"key_will_change!","return_type":"Nil","visibility":"Public","body":"@key_changed = true\n@key_was = @key.dup\n"}},{"html_id":"lock(expire:Time::Span=self.expire,timeout:Time::Span=self.timeout)-instance-method","name":"lock","abstract":false,"args":[{"name":"expire","default_value":"self.expire","external_name":"expire","restriction":"Time::Span"},{"name":"timeout","default_value":"self.timeout","external_name":"timeout","restriction":"Time::Span"}],"args_string":"(expire : Time::Span = self.expire, timeout : Time::Span = self.timeout)","args_html":"(expire : Time::Span = <span class=\"k\">self</span>.expire, timeout : Time::Span = <span class=\"k\">self</span>.timeout)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":83,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L83"},"def":{"name":"lock","args":[{"name":"expire","default_value":"self.expire","external_name":"expire","restriction":"Time::Span"},{"name":"timeout","default_value":"self.timeout","external_name":"timeout","restriction":"Time::Span"}],"visibility":"Public","body":"sleep_amount = 0.1.seconds\nstart_at = Time.utc\nloop do\n  if try_lock(expire: expire)\n    return\n  end\n  if ((Time.utc - start_at) + sleep_amount) > timeout\n    raise(Error::LockUnavailable.new(key.as(String)))\n  end\n  sleep(sleep_amount)\n  sleep_amount = {1.seconds, sleep_amount * 2}.min\nend\n"}},{"html_id":"locked?:Bool-instance-method","name":"locked?","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":44,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L44"},"def":{"name":"locked?","return_type":"Bool","visibility":"Public","body":"@locked"}},{"html_id":"persistent_attributes-instance-method","name":"persistent_attributes","doc":"Returns a `Hash` of all attributes that can be persisted.","summary":"<p>Returns a <code>Hash</code> of all attributes that can be persisted.</p>","abstract":false,"def":{"name":"persistent_attributes","visibility":"Public","body":"{:key => @key, :instance_token => @instance_token, :expires_at => @expires_at, :id => @id}"}},{"html_id":"refresh(expire:Time::Span?=nil)-instance-method","name":"refresh","abstract":false,"args":[{"name":"expire","default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"}],"args_string":"(expire : Time::Span? = nil)","args_html":"(expire : Time::Span? = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":144,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L144"},"def":{"name":"refresh","args":[{"name":"expire","default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"}],"visibility":"Public","body":"if locked?\nelse\n  raise(Error::LockInvalidOp.new(locked: locked?, key: key.as(String)))\nend\nset_expiration(expire, use_previous: true)\nresult = Lock.table_query do |q|\n  (q.get(self.id)).update do |doc|\n    r.branch(doc[:instance_token].eq(self.instance_token), {:expires_at => expiry_epoch}, nil)\n  end\nend\nif result[\"replaced\"] == 1\nelse\n  @locked = false\n  raise(Error::LockLost.new(key.as(String)))\nend\n"}},{"html_id":"restore_attributes-instance-method","name":"restore_attributes","doc":"Reset each attribute to their previous values and clears all changes.","summary":"<p>Reset each attribute to their previous values and clears all changes.</p>","abstract":false,"def":{"name":"restore_attributes","visibility":"Public","body":"if @key_changed\n  @key = @key_was\nend\nif @instance_token_changed\n  @instance_token = @instance_token_was\nend\nif @expires_at_changed\n  @expires_at = @expires_at_was\nend\nif @id_changed\n  @id = @id_was\nend\nclear_changes_information\n"}},{"html_id":"run_create_callbacks(&)-instance-method","name":"run_create_callbacks","doc":"Wrap a block with callbacks for the appropriate crud operation","summary":"<p>Wrap a block with callbacks for the appropriate crud operation</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"run_create_callbacks","yields":0,"visibility":"Public","body":"__before_create\nresult = yield\n__after_create\nresult\n"}},{"html_id":"run_destroy_callbacks(&)-instance-method","name":"run_destroy_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"run_destroy_callbacks","yields":0,"visibility":"Public","body":"__before_destroy\nresult = yield\n__after_destroy\nresult\n"}},{"html_id":"run_save_callbacks(&)-instance-method","name":"run_save_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"run_save_callbacks","yields":0,"visibility":"Public","body":"__before_save\nresult = yield\n__after_save\nresult\n"}},{"html_id":"run_update_callbacks(&)-instance-method","name":"run_update_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L13"},"def":{"name":"run_update_callbacks","yields":0,"visibility":"Public","body":"__before_update\nresult = yield\n__after_update\nresult\n"}},{"html_id":"synchronize(**options,&)-instance-method","name":"synchronize","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":74,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L74"},"def":{"name":"synchronize","double_splat":{"name":"options","external_name":"options","restriction":""},"yields":0,"visibility":"Public","body":"lock(**options)\nbegin\n  yield\nensure\n  if locked?\n    unlock\n  end\nend\n"}},{"html_id":"table_name-instance-method","name":"table_name","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"table_name","visibility":"Public","body":"@@table_name"}},{"html_id":"timeout:Time::Span-instance-method","name":"timeout","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":40,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L40"},"def":{"name":"timeout","return_type":"Time::Span","visibility":"Public","body":"@timeout"}},{"html_id":"timeout=(timeout:Time::Span)-instance-method","name":"timeout=","abstract":false,"args":[{"name":"timeout","external_name":"timeout","restriction":"Time::Span"}],"args_string":"(timeout : Time::Span)","args_html":"(timeout : Time::Span)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":40,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L40"},"def":{"name":"timeout=","args":[{"name":"timeout","external_name":"timeout","restriction":"Time::Span"}],"visibility":"Public","body":"@timeout = timeout"}},{"html_id":"try_lock(expire:Time::Span=self.expire)-instance-method","name":"try_lock","abstract":false,"args":[{"name":"expire","default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"args_string":"(expire : Time::Span = self.expire)","args_html":"(expire : Time::Span = <span class=\"k\">self</span>.expire)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":96,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L96"},"def":{"name":"try_lock","args":[{"name":"expire","default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"visibility":"Public","body":"if locked?\n  raise(Error::LockInvalidOp.new(locked: locked?, key: key.as(String)))\nend\nset_expiration(expire)\nresult = Lock.table_query do |q|\n  (q.get(self.id)).replace do |doc|\n    r.branch((doc.eq(nil)).or((r.epoch_time(doc[:expires_at])) < r.now), lock_attributes, doc)\n  end\nend\ninserted = result[\"inserted\"]?.try do |__arg0|\n  __arg0.raw.as(Int64)\nend\nreplaced = result[\"replaced\"]?.try do |__arg1|\n  __arg1.raw.as(Int64)\nend\n@locked = if inserted && replaced\n  (inserted + replaced) == 1\nelse\n  false\nend\n"}},{"html_id":"unlock-instance-method","name":"unlock","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":124,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L124"},"def":{"name":"unlock","visibility":"Public","body":"if locked?\nelse\n  raise(Error::LockInvalidOp.new(locked: locked?, key: key.as(String)))\nend\nresult = Lock.table_query do |q|\n  (q.get(self.id)).replace do |doc|\n    r.branch((doc[:instance_token].default(nil)).eq(self.instance_token), nil, doc)\n  end\nend\n@locked = false\nif result[\"deleted\"] == 1\nelse\n  raise(Error::LockLost.new(key.as(String)))\nend\n"}},{"html_id":"validate_nilability-instance-method","name":"validate_nilability","doc":"Validate that all non-nillable fields have values.","summary":"<p>Validate that all non-nillable fields have values.</p>","abstract":false,"def":{"name":"validate_nilability","visibility":"Public","body":"if @key.nil?\n  validation_error(:key, \"should not be nil\")\nend\nif @instance_token.nil?\n  validation_error(:instance_token, \"should not be nil\")\nend\nif @expires_at.nil?\n  validation_error(:expires_at, \"should not be nil\")\nend\n"}}],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Lock/FloatEpochConverter","path":"RethinkORM/Lock/FloatEpochConverter.html","kind":"module","full_name":"RethinkORM::Lock::FloatEpochConverter","name":"FloatEpochConverter","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/lock.cr","line_number":224,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L224"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},"doc":"This module converts an epoch to a decimal seconds.\nRethinkDB's epochs are floats!?\n\n:nodoc:","summary":"<p>This module converts an epoch to a decimal seconds.</p>","class_methods":[{"html_id":"from_json(value:JSON::PullParser):Time-class-method","name":"from_json","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"JSON::PullParser"}],"args_string":"(value : JSON::PullParser) : Time","args_html":"(value : JSON::PullParser) : Time","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":225,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L225"},"def":{"name":"from_json","args":[{"name":"value","external_name":"value","restriction":"JSON::PullParser"}],"return_type":"Time","visibility":"Public","body":"float_milliseconds = value.read_float * 1000\nTime.unix_ms(float_milliseconds.to_i64)\n"}},{"html_id":"to_json(value:Time,json:JSON::Builder)-class-method","name":"to_json","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Time"},{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(value : Time, json : JSON::Builder)","args_html":"(value : Time, json : JSON::Builder)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":230,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L230"},"def":{"name":"to_json","args":[{"name":"value","external_name":"value","restriction":"Time"},{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"visibility":"Public","body":"json.number(value.to_unix_ms / 1000)"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Lock/Reentrant","path":"RethinkORM/Lock/Reentrant.html","kind":"class","full_name":"RethinkORM::Lock::Reentrant","name":"Reentrant","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"},{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},{"html_id":"rethinkdb-orm/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"rethinkdb-orm/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CALLBACKS","name":"CALLBACKS","value":"{before_save: [] of Nil, after_save: [] of Nil, before_create: [] of Nil, after_create: [] of Nil, before_update: [] of Nil, after_update: [] of Nil, before_destroy: [] of Nil, after_destroy: [] of Nil}"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},"class_methods":[{"html_id":"attributes:Array(Symbol)-class-method","name":"attributes","doc":"Returns all attribute keys.","summary":"<p>Returns all attribute keys.</p>","abstract":false,"def":{"name":"attributes","return_type":"Array(Symbol)","visibility":"Public","body":"[:lock_count, :id, :key, :instance_token, :expires_at]"}},{"html_id":"table_name-class-method","name":"table_name","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"table_name","visibility":"Public","body":"@@table_name"}}],"constructors":[{"html_id":"from_json(string_or_io:String|IO,trusted:Bool=false):self-class-method","name":"from_json","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = false) : self","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"from_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"(super(string_or_io)).tap(&.after_initialize(trusted: trusted))"}},{"html_id":"from_json(string_or_io:String|IO,root:String,trusted:Bool=false):self-class-method","name":"from_json","doc":"Deserializes the given JSON in *string_or_io* into\nan instance of `self`, assuming the JSON consists\nof an JSON object with key *root*, and whose value is\nthe value to deserialize. Will not deserialise from\nfields with mass_assign: false\n\n```\nclass User < ActiveModel::Model\n  attribute name : String\n  attribute google_id : UUID, mass_assign: false\nend\n\nUser.from_json(%({\"main\": {\"name\": \"Jason\", \"google_id\": \"f6f70bfb-c882-446d-8758-7ce47db39620\"}}), root: \"main\") # => #<User:0x103131b20 @name=\"Jason\">\n```","summary":"<p>Deserializes the given JSON in <em>string_or_io</em> into an instance of <code>self</code>, assuming the JSON consists of an JSON object with key <em>root</em>, and whose value is the value to deserialize.</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, root : String, trusted : Bool = false) : self","args_html":"(string_or_io : String | IO, root : String, trusted : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"from_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"(super(string_or_io, root)).tap(&.after_initialize(trusted: trusted))"}},{"html_id":"from_trusted_json(string_or_io:String|IO,root:String):self-class-method","name":"from_trusted_json","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"}],"args_string":"(string_or_io : String | IO, root : String) : self","args_html":"(string_or_io : String | IO, root : String) : <span class=\"k\">self</span>","def":{"name":"from_trusted_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"root","external_name":"root","restriction":"String"}],"return_type":"self","visibility":"Public","body":"self.from_json(string_or_io, root, true)"}},{"html_id":"from_trusted_json(string_or_io:String|IO):self-class-method","name":"from_trusted_json","doc":"Serialize from a trusted JSON source","summary":"<p>Serialize from a trusted JSON source</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : self","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","def":{"name":"from_trusted_json","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"return_type":"self","visibility":"Public","body":"self.from_json(string_or_io, trusted: true)"}},{"html_id":"from_trusted_yaml(string_or_io:String|IO):self-class-method","name":"from_trusted_yaml","doc":"Serialize from a trusted YAML source","summary":"<p>Serialize from a trusted YAML source</p>","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : self","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","def":{"name":"from_trusted_yaml","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"}],"return_type":"self","visibility":"Public","body":"self.from_yaml(string_or_io, trusted: true)"}},{"html_id":"from_yaml(string_or_io:String|IO,trusted:Bool=false):self-class-method","name":"from_yaml","abstract":false,"args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"args_string":"(string_or_io : String | IO, trusted : Bool = false) : self","args_html":"(string_or_io : String | IO, trusted : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"from_yaml","args":[{"name":"string_or_io","external_name":"string_or_io","restriction":"String | IO"},{"name":"trusted","default_value":"false","external_name":"trusted","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"(super(string_or_io)).tap(&.after_initialize(trusted: trusted))"}},{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(key:String,expire:Time::Span?=nil,timeout:Time::Span?=nil,instance_token:String=Lock.new_instance_token)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"expire","default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"args_string":"(key : String, expire : Time::Span? = nil, timeout : Time::Span? = nil, instance_token : String = Lock.new_instance_token)","args_html":"(key : String, expire : Time::Span? = <span class=\"n\">nil</span>, timeout : Time::Span? = <span class=\"n\">nil</span>, instance_token : String = <span class=\"t\">Lock</span>.new_instance_token)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L9"},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"expire","default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, expire, timeout, instance_token)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(lock_count:Int32|ActiveModel::Model::None=::ActiveModel::Model::None.new,id:String?|ActiveModel::Model::None=::ActiveModel::Model::None.new,key:String|ActiveModel::Model::None=::ActiveModel::Model::None.new,instance_token:String|ActiveModel::Model::None=::ActiveModel::Model::None.new,expires_at:Time|ActiveModel::Model::None=::ActiveModel::Model::None.new)-class-method","name":"new","abstract":false,"args":[{"name":"lock_count","default_value":"::ActiveModel::Model::None.new","external_name":"lock_count","restriction":"Int32 | ::ActiveModel::Model::None"},{"name":"id","default_value":"::ActiveModel::Model::None.new","external_name":"id","restriction":"String | Nil | ::ActiveModel::Model::None"},{"name":"key","default_value":"::ActiveModel::Model::None.new","external_name":"key","restriction":"String | ::ActiveModel::Model::None"},{"name":"instance_token","default_value":"::ActiveModel::Model::None.new","external_name":"instance_token","restriction":"String | ::ActiveModel::Model::None"},{"name":"expires_at","default_value":"::ActiveModel::Model::None.new","external_name":"expires_at","restriction":"Time | ::ActiveModel::Model::None"}],"args_string":"(lock_count : Int32 | ActiveModel::Model::None = ::ActiveModel::Model::None.new, id : String? | ActiveModel::Model::None = ::ActiveModel::Model::None.new, key : String | ActiveModel::Model::None = ::ActiveModel::Model::None.new, instance_token : String | ActiveModel::Model::None = ::ActiveModel::Model::None.new, expires_at : Time | ActiveModel::Model::None = ::ActiveModel::Model::None.new)","args_html":"(lock_count : Int32 | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>, id : String? | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>, key : String | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>, instance_token : String | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>, expires_at : Time | ActiveModel::Model::None = <span class=\"t\">::</span><span class=\"t\">ActiveModel</span><span class=\"t\">::</span><span class=\"t\">Model</span><span class=\"t\">::</span><span class=\"t\">None</span>.<span class=\"k\">new</span>)","def":{"name":"new","args":[{"name":"lock_count","default_value":"::ActiveModel::Model::None.new","external_name":"lock_count","restriction":"Int32 | ::ActiveModel::Model::None"},{"name":"id","default_value":"::ActiveModel::Model::None.new","external_name":"id","restriction":"String | Nil | ::ActiveModel::Model::None"},{"name":"key","default_value":"::ActiveModel::Model::None.new","external_name":"key","restriction":"String | ::ActiveModel::Model::None"},{"name":"instance_token","default_value":"::ActiveModel::Model::None.new","external_name":"instance_token","restriction":"String | ::ActiveModel::Model::None"},{"name":"expires_at","default_value":"::ActiveModel::Model::None.new","external_name":"expires_at","restriction":"Time | ::ActiveModel::Model::None"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lock_count, id, key, instance_token, expires_at)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-class-method","name":"new","doc":"Initialize RethinkORM::Lock::Reentrant from `HTTP::Params`.","summary":"<p>Initialize RethinkORM::Lock::Reentrant from <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","def":{"name":"new","args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"after_create-instance-method","name":"after_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"after_create","visibility":"Public","body":"__after_create"}},{"html_id":"after_destroy-instance-method","name":"after_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"after_destroy","visibility":"Public","body":"__after_destroy"}},{"html_id":"after_initialize(trusted:Bool)-instance-method","name":"after_initialize","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"trusted","external_name":"trusted","restriction":"Bool"}],"args_string":"(trusted : Bool)","args_html":"(trusted : Bool)","def":{"name":"after_initialize","args":[{"name":"trusted","external_name":"trusted","restriction":"Bool"}],"visibility":"Public","body":"if !trusted\n  @id = nil\nend\napply_defaults\nclear_changes_information\n"}},{"html_id":"after_save-instance-method","name":"after_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"after_save","visibility":"Public","body":"__after_save"}},{"html_id":"after_update-instance-method","name":"after_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"after_update","visibility":"Public","body":"__after_update"}},{"html_id":"apply_defaults-instance-method","name":"apply_defaults","doc":"Generate code to apply default values","summary":"<p>Generate code to apply default values</p>","abstract":false,"def":{"name":"apply_defaults","visibility":"Public","body":"super()"}},{"html_id":"assign_attributes(lock_count:Int32|Missing=Missing,id:String?|Missing=Missing,key:String|Missing=Missing,instance_token:String|Missing=Missing,expires_at:Time|Missing=Missing)-instance-method","name":"assign_attributes","doc":"Assign to multiple attributes.","summary":"<p>Assign to multiple attributes.</p>","abstract":false,"args":[{"name":"lock_count","default_value":"Missing","external_name":"lock_count","restriction":"Int32 | Missing"},{"name":"id","default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"},{"name":"key","default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"}],"args_string":"(lock_count : Int32 | Missing = Missing, id : String? | Missing = Missing, key : String | Missing = Missing, instance_token : String | Missing = Missing, expires_at : Time | Missing = Missing)","args_html":"(lock_count : Int32 | Missing = <span class=\"t\">Missing</span>, id : String? | Missing = <span class=\"t\">Missing</span>, key : String | Missing = <span class=\"t\">Missing</span>, instance_token : String | Missing = <span class=\"t\">Missing</span>, expires_at : Time | Missing = <span class=\"t\">Missing</span>)","def":{"name":"assign_attributes","args":[{"name":"lock_count","default_value":"Missing","external_name":"lock_count","restriction":"Int32 | Missing"},{"name":"id","default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"},{"name":"key","default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"}],"visibility":"Public","body":"if lock_count.is_a?(Missing)\nelse\n  self.lock_count = lock_count\nend\nif key.is_a?(Missing)\nelse\n  self.key = key\nend\nif instance_token.is_a?(Missing)\nelse\n  self.instance_token = instance_token\nend\nif expires_at.is_a?(Missing)\nelse\n  self.expires_at = expires_at\nend\n"}},{"html_id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","name":"assign_attributes","doc":"Assign to mulitple attributes via `HTTP::Params`.","summary":"<p>Assign to mulitple attributes via <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","def":{"name":"assign_attributes","args":[{"name":"params","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"visibility":"Public","body":"__from_object_params__(params)\nself\n"}},{"html_id":"assign_attributes_from_json(json,root:String)-instance-method","name":"assign_attributes_from_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"args_string":"(json, root : String)","args_html":"(json, root : String)","def":{"name":"assign_attributes_from_json","args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_json(json, root: root)\nif model.lock_count_present? && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"assign_attributes_from_json(json)-instance-method","name":"assign_attributes_from_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","def":{"name":"assign_attributes_from_json","args":[{"name":"json","external_name":"json","restriction":""}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_json(json)\nif model.lock_count_present? && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"assign_attributes_from_trusted_json(json,root:String)-instance-method","name":"assign_attributes_from_trusted_json","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"args_string":"(json, root : String)","args_html":"(json, root : String)","def":{"name":"assign_attributes_from_trusted_json","args":[{"name":"json","external_name":"json","restriction":""},{"name":"root","external_name":"root","restriction":"String"}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_trusted_json(json, root)\nif model.lock_count_present? && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif model.id_present? && (self.id != model.id)\n  self.id = model.id\nend\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"assign_attributes_from_trusted_json(json)-instance-method","name":"assign_attributes_from_trusted_json","doc":"Assign each field from JSON if field exists in JSON and has changed in model","summary":"<p>Assign each field from JSON if field exists in JSON and has changed in model</p>","abstract":false,"args":[{"name":"json","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","def":{"name":"assign_attributes_from_trusted_json","args":[{"name":"json","external_name":"json","restriction":""}],"visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_trusted_json(json)\nif model.lock_count_present? && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif model.id_present? && (self.id != model.id)\n  self.id = model.id\nend\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"assign_attributes_from_trusted_yaml(yaml)-instance-method","name":"assign_attributes_from_trusted_yaml","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[{"name":"yaml","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","def":{"name":"assign_attributes_from_trusted_yaml","args":[{"name":"yaml","external_name":"yaml","restriction":""}],"visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_trusted_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif model.lock_count_present? && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif model.id_present? && (self.id != model.id)\n  self.id = model.id\nend\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"assign_attributes_from_yaml(yaml)-instance-method","name":"assign_attributes_from_yaml","doc":"Uses the YAML parser as JSON is valid YAML","summary":"<p>Uses the YAML parser as JSON is valid YAML</p>","abstract":false,"args":[{"name":"yaml","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","def":{"name":"assign_attributes_from_yaml","args":[{"name":"yaml","external_name":"yaml","restriction":""}],"visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif model.lock_count_present? && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif model.key_present? && (self.key != model.key)\n  self.key = model.key\nend\nif model.instance_token_present? && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif model.expires_at_present? && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"html_id":"attributes-instance-method","name":"attributes","doc":"Returns a `Hash` of all attribute values","summary":"<p>Returns a <code>Hash</code> of all attribute values</p>","abstract":false,"def":{"name":"attributes","visibility":"Public","body":"{:lock_count => @lock_count, :id => @id, :key => @key, :instance_token => @instance_token, :expires_at => @expires_at}"}},{"html_id":"attributes_tuple-instance-method","name":"attributes_tuple","doc":"Returns a `NamedTuple` of all attribute values.","summary":"<p>Returns a <code>NamedTuple</code> of all attribute values.</p>","abstract":false,"def":{"name":"attributes_tuple","visibility":"Public","body":"{lock_count: @lock_count, id: @id, key: @key, instance_token: @instance_token, expires_at: @expires_at}"}},{"html_id":"before_create-instance-method","name":"before_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"before_create","visibility":"Public","body":"__before_create"}},{"html_id":"before_destroy-instance-method","name":"before_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"before_destroy","visibility":"Public","body":"__before_destroy"}},{"html_id":"before_save-instance-method","name":"before_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"before_save","visibility":"Public","body":"__before_save"}},{"html_id":"before_update-instance-method","name":"before_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"before_update","visibility":"Public","body":"__before_update"}},{"html_id":"changed?-instance-method","name":"changed?","doc":"Check if any attributes have changed.","summary":"<p>Check if any attributes have changed.</p>","abstract":false,"def":{"name":"changed?","visibility":"Public","body":"modified = false\nif @lock_count_changed\n  modified = true\nend\nif @id_changed\n  modified = true\nend\nif @key_changed\n  modified = true\nend\nif @instance_token_changed\n  modified = true\nend\nif @expires_at_changed\n  modified = true\nend\nmodified\n"}},{"html_id":"changed_attributes-instance-method","name":"changed_attributes","doc":"Returns a `Hash` with all changed attributes.","summary":"<p>Returns a <code>Hash</code> with all changed attributes.</p>","abstract":false,"def":{"name":"changed_attributes","visibility":"Public","body":"all = attributes\nif @lock_count_changed\nelse\n  all.delete(:lock_count)\nend\nif @id_changed\nelse\n  all.delete(:id)\nend\nif @key_changed\nelse\n  all.delete(:key)\nend\nif @instance_token_changed\nelse\n  all.delete(:instance_token)\nend\nif @expires_at_changed\nelse\n  all.delete(:expires_at)\nend\nall\n"}},{"html_id":"changed_json(io:IO):Nil-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","def":{"name":"changed_json","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @lock_count_changed\nelse\n  all.delete(\"lock_count\")\nend\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nall.to_json(io)\n"}},{"html_id":"changed_json:String-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"def":{"name":"changed_json","return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_json(string)\nend"}},{"html_id":"changed_yaml(io:IO):Nil-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","def":{"name":"changed_yaml","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @lock_count_changed\nelse\n  all.delete(\"lock_count\")\nend\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nall.to_yaml(io)\n"}},{"html_id":"changed_yaml:String-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"def":{"name":"changed_yaml","return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_yaml(string)\nend"}},{"html_id":"clear_changes_information-instance-method","name":"clear_changes_information","doc":"Reset changes for all attributes.","summary":"<p>Reset changes for all attributes.</p>","abstract":false,"def":{"name":"clear_changes_information","visibility":"Public","body":"@lock_count_changed = false\n@lock_count_was = nil\n@id_changed = false\n@id_was = nil\n@key_changed = false\n@key_was = nil\n@instance_token_changed = false\n@instance_token_was = nil\n@expires_at_changed = false\n@expires_at_was = nil\nnil\n"}},{"html_id":"expires_at:Time-instance-method","name":"expires_at","doc":"`expires_at` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at%3ATime-instance-method\">#expires_at</a></code> getter</p>","abstract":false,"def":{"name":"expires_at","return_type":"Time","visibility":"Public","body":"__temp_74 = @expires_at\nif __temp_74.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#expires_at : Time\"))\nend\n__temp_74\n"}},{"html_id":"expires_at=(value:Time)-instance-method","name":"expires_at=","doc":"`expires_at` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at%3ATime-instance-method\">#expires_at</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Time"}],"args_string":"(value : Time)","args_html":"(value : Time)","def":{"name":"expires_at=","args":[{"name":"value","external_name":"value","restriction":"Time"}],"visibility":"Public","body":"if (!@expires_at_changed) && (@expires_at != value)\n  @expires_at_changed = true\n  @expires_at_was = @expires_at\nend\n@expires_at = value\n"}},{"html_id":"id:String?-instance-method","name":"id","doc":"`id` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#id%3AString%3F-instance-method\">#id</a></code> getter</p>","abstract":false,"def":{"name":"id","return_type":"String | Nil","visibility":"Public","body":"@id"}},{"html_id":"id=(value:String?)-instance-method","name":"id=","doc":"`id` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#id%3AString%3F-instance-method\">#id</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String | Nil"}],"args_string":"(value : String?)","args_html":"(value : String?)","def":{"name":"id=","args":[{"name":"value","external_name":"value","restriction":"String | Nil"}],"visibility":"Public","body":"if (!@id_changed) && (@id != value)\n  @id_changed = true\n  @id_was = @id\nend\n@id = value\n"}},{"html_id":"instance_token:String-instance-method","name":"instance_token","doc":"`instance_token` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token%3AString-instance-method\">#instance_token</a></code> getter</p>","abstract":false,"def":{"name":"instance_token","return_type":"String","visibility":"Public","body":"__temp_74 = @instance_token\nif __temp_74.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#instance_token : String\"))\nend\n__temp_74\n"}},{"html_id":"instance_token=(value:String)-instance-method","name":"instance_token=","doc":"`instance_token` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token%3AString-instance-method\">#instance_token</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"instance_token=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"if (!@instance_token_changed) && (@instance_token != value)\n  @instance_token_changed = true\n  @instance_token_was = @instance_token\nend\n@instance_token = value\n"}},{"html_id":"key:String-instance-method","name":"key","doc":"`key` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#key%3AString-instance-method\">#key</a></code> getter</p>","abstract":false,"def":{"name":"key","return_type":"String","visibility":"Public","body":"__temp_74 = @key\nif __temp_74.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#key : String\"))\nend\n__temp_74\n"}},{"html_id":"key=(value:String)-instance-method","name":"key=","doc":"`key` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#key%3AString-instance-method\">#key</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"key=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"if (!@key_changed) && (@key != value)\n  @key_changed = true\n  @key_was = @key\nend\n@key = value\n"}},{"html_id":"lock_count:Int32-instance-method","name":"lock_count","doc":"`lock_count` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count%3AInt32-instance-method\">#lock_count</a></code> getter</p>","abstract":false,"def":{"name":"lock_count","return_type":"Int32","visibility":"Public","body":"__temp_74 = @lock_count\nif __temp_74.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#lock_count : Int32\"))\nend\n__temp_74\n"}},{"html_id":"lock_count=(value:Int32)-instance-method","name":"lock_count=","doc":"Setters\n`lock_count` setter","summary":"<p>Setters <code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count%3AInt32-instance-method\">#lock_count</a></code> setter</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","def":{"name":"lock_count=","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"visibility":"Public","body":"if (!@lock_count_changed) && (@lock_count != value)\n  @lock_count_changed = true\n  @lock_count_was = @lock_count\nend\n@lock_count = value\n"}},{"html_id":"lock_count?:Int32?-instance-method","name":"lock_count?","abstract":false,"def":{"name":"lock_count?","return_type":"Int32 | ::Nil","visibility":"Public","body":"@lock_count"}},{"html_id":"lock_count_change:Tuple(Int32?,Int32?)?-instance-method","name":"lock_count_change","doc":"Returns a Tuple of the previous and the current\nvalue of an instance variable if it has changed","summary":"<p>Returns a Tuple of the previous and the current value of an instance variable if it has changed</p>","abstract":false,"def":{"name":"lock_count_change","return_type":"Tuple(Int32 | ::Nil, Int32 | ::Nil) | ::Nil","visibility":"Public","body":"if lock_count_changed?\n  {@lock_count_was, @lock_count}\nend"}},{"html_id":"lock_count_changed?:Bool-instance-method","name":"lock_count_changed?","abstract":false,"def":{"name":"lock_count_changed?","visibility":"Public","body":"@lock_count_changed"}},{"html_id":"lock_count_default:Int32-instance-method","name":"lock_count_default","doc":"`lock_count`'s default value","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count%3AInt32-instance-method\">#lock_count</a></code>'s default value</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":7,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L7"},"def":{"name":"lock_count_default","return_type":"Int32","visibility":"Public","body":"nil"}},{"html_id":"lock_count_present?:Bool-instance-method","name":"lock_count_present?","abstract":false,"def":{"name":"lock_count_present?","return_type":"Bool","visibility":"Public","body":"@lock_count_present"}},{"html_id":"lock_count_was:Int32?-instance-method","name":"lock_count_was","abstract":false,"def":{"name":"lock_count_was","return_type":"Int32 | Nil","visibility":"Public","body":"@lock_count_was"}},{"html_id":"lock_count_will_change!:Nil-instance-method","name":"lock_count_will_change!","doc":"Include `lock_count` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count%3AInt32-instance-method\">#lock_count</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"def":{"name":"lock_count_will_change!","return_type":"Nil","visibility":"Public","body":"@lock_count_changed = true\n@lock_count_was = @lock_count.dup\n"}},{"html_id":"persistent_attributes-instance-method","name":"persistent_attributes","doc":"Returns a `Hash` of all attributes that can be persisted.","summary":"<p>Returns a <code>Hash</code> of all attributes that can be persisted.</p>","abstract":false,"def":{"name":"persistent_attributes","visibility":"Public","body":"{:lock_count => @lock_count, :id => @id, :key => @key, :instance_token => @instance_token, :expires_at => @expires_at}"}},{"html_id":"restore_attributes-instance-method","name":"restore_attributes","doc":"Reset each attribute to their previous values and clears all changes.","summary":"<p>Reset each attribute to their previous values and clears all changes.</p>","abstract":false,"def":{"name":"restore_attributes","visibility":"Public","body":"if @lock_count_changed\n  @lock_count = @lock_count_was\nend\nif @id_changed\n  @id = @id_was\nend\nif @key_changed\n  @key = @key_was\nend\nif @instance_token_changed\n  @instance_token = @instance_token_was\nend\nif @expires_at_changed\n  @expires_at = @expires_at_was\nend\nclear_changes_information\n"}},{"html_id":"run_create_callbacks(&)-instance-method","name":"run_create_callbacks","doc":"Wrap a block with callbacks for the appropriate crud operation","summary":"<p>Wrap a block with callbacks for the appropriate crud operation</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"run_create_callbacks","yields":0,"visibility":"Public","body":"__before_create\nresult = yield\n__after_create\nresult\n"}},{"html_id":"run_destroy_callbacks(&)-instance-method","name":"run_destroy_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"run_destroy_callbacks","yields":0,"visibility":"Public","body":"__before_destroy\nresult = yield\n__after_destroy\nresult\n"}},{"html_id":"run_save_callbacks(&)-instance-method","name":"run_save_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"run_save_callbacks","yields":0,"visibility":"Public","body":"__before_save\nresult = yield\n__after_save\nresult\n"}},{"html_id":"run_update_callbacks(&)-instance-method","name":"run_update_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L4"},"def":{"name":"run_update_callbacks","yields":0,"visibility":"Public","body":"__before_update\nresult = yield\n__after_update\nresult\n"}},{"html_id":"table_name-instance-method","name":"table_name","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"def":{"name":"table_name","visibility":"Public","body":"@@table_name"}},{"html_id":"try_lock(expire:Time::Span=self.expire)-instance-method","name":"try_lock","abstract":false,"args":[{"name":"expire","default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"args_string":"(expire : Time::Span = self.expire)","args_html":"(expire : Time::Span = <span class=\"k\">self</span>.expire)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":22,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L22"},"def":{"name":"try_lock","args":[{"name":"expire","default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"visibility":"Public","body":"set_expiration(expire)\nresult = Lock::Reentrant.table_query do |q|\n  (q.get(self.id.as(String))).replace do |doc|\n    r.branch((doc[:instance_token].default(nil)).eq(self.instance_token), doc.merge({expires_at: expiry_epoch, lock_count: doc[:lock_count] + 1}), r.branch((doc.eq(nil)).or((r.epoch_time(doc[:expires_at])) < r.now), lock_attributes.merge({:lock_count => 1}), doc))\n  end\nend\n@locked = true\ninserted = result[\"inserted\"]?.try do |__arg0|\n  __arg0.raw.as(Int64)\nend\nreplaced = result[\"replaced\"]?.try do |__arg1|\n  __arg1.raw.as(Int64)\nend\nif inserted && replaced\n  (inserted + replaced) == 1\nelse\n  false\nend\n"}},{"html_id":"unlock-instance-method","name":"unlock","abstract":false,"location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":60,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock/reentrant.cr#L60"},"def":{"name":"unlock","visibility":"Public","body":"set_expiration(use_previous: true)\nresult = Lock::Reentrant.table_query do |q|\n  (q.get(self.id.as(String))).replace do |doc|\n    r.branch((doc[:instance_token].default(nil)).eq(self.instance_token), r.branch(doc[:lock_count] > 1, doc.merge({:expires_at => expiry_epoch, :lock_count => doc[:lock_count] - 1}), nil), doc)\n  end\nend\ndeleted = result[\"deleted\"]?.try do |__arg2|\n  __arg2.raw.as(Int64)\nend\nreplaced = result[\"replaced\"]?.try do |__arg3|\n  __arg3.raw.as(Int64)\nend\n@locked = if deleted && replaced\n  !((replaced + deleted) == 1)\nelse\n  true\nend\nif @locked\n  raise(Error::LockLost.new(self.key.as(String)))\nend\n"}},{"html_id":"validate_nilability-instance-method","name":"validate_nilability","doc":"Validate that all non-nillable fields have values.","summary":"<p>Validate that all non-nillable fields have values.</p>","abstract":false,"def":{"name":"validate_nilability","visibility":"Public","body":"if @lock_count.nil?\n  validation_error(:lock_count, \"should not be nil\")\nend\nif @key.nil?\n  validation_error(:key, \"should not be nil\")\nend\nif @instance_token.nil?\n  validation_error(:instance_token, \"should not be nil\")\nend\nif @expires_at.nil?\n  validation_error(:expires_at, \"should not be nil\")\nend\n"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Lock/TokenRefresher","path":"RethinkORM/Lock/TokenRefresher.html","kind":"module","full_name":"RethinkORM::Lock::TokenRefresher","name":"TokenRefresher","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/lock.cr","line_number":209,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L209"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},"doc":"NOTE: Necessary as overriding `from_trusted_json` wasn't working\n\n:nodoc:","summary":"<p><span class=\"flag purple\">NOTE</span>  Necessary as overriding <code>from_trusted_json</code> wasn't working</p>","class_methods":[{"html_id":"from_json(value:JSON::PullParser):String-class-method","name":"from_json","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"JSON::PullParser"}],"args_string":"(value : JSON::PullParser) : String","args_html":"(value : JSON::PullParser) : String","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":210,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L210"},"def":{"name":"from_json","args":[{"name":"value","external_name":"value","restriction":"JSON::PullParser"}],"return_type":"String","visibility":"Public","body":"value.read_string\nLock.new_instance_token\n"}},{"html_id":"to_json(value:String,json:JSON::Builder)-class-method","name":"to_json","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(value : String, json : JSON::Builder)","args_html":"(value : String, json : JSON::Builder)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":215,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/lock.cr#L215"},"def":{"name":"to_json","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"visibility":"Public","body":"json.string(value)"}}]}]},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","path":"RethinkORM/Persistence.html","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/persistence.cr","line_number":6,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L6"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"instance_methods":[{"html_id":"_new_flag-instance-method","name":"_new_flag","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L13"},"def":{"name":"_new_flag","visibility":"Public","body":"@_new_flag"}},{"html_id":"_new_flag=(_new_flag)-instance-method","name":"_new_flag=","abstract":false,"args":[{"name":"_new_flag","external_name":"_new_flag","restriction":""}],"args_string":"(_new_flag)","args_html":"(_new_flag)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":13,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L13"},"def":{"name":"_new_flag=","args":[{"name":"_new_flag","external_name":"_new_flag","restriction":""}],"visibility":"Public","body":"@_new_flag = _new_flag"}},{"html_id":"delete-instance-method","name":"delete","doc":"Only deletes document from table. No callbacks or updated associations\n","summary":"<p>Only deletes document from table.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":147,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L147"},"def":{"name":"delete","visibility":"Public","body":"if destroyed?\n  return self\nend\nif new_record?\n  return self\nend\n__delete\n"}},{"html_id":"destroy-instance-method","name":"destroy","doc":"Destroy object, run destroy callbacks and update associations\n","summary":"<p>Destroy object, run destroy callbacks and update associations</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":135,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L135"},"def":{"name":"destroy","visibility":"Public","body":"if destroyed?\n  return self\nend\nif new_record?\n  return self\nend\nrun_destroy_callbacks do\n  __delete\n  self\nend\n"}},{"html_id":"destroyed=(destroyed:Bool)-instance-method","name":"destroyed=","abstract":false,"args":[{"name":"destroyed","external_name":"destroyed","restriction":"Bool"}],"args_string":"(destroyed : Bool)","args_html":"(destroyed : Bool)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":31,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L31"},"def":{"name":"destroyed=","args":[{"name":"destroyed","external_name":"destroyed","restriction":"Bool"}],"visibility":"Public","body":"@destroyed = destroyed"}},{"html_id":"destroyed?:Bool-instance-method","name":"destroyed?","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":31,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L31"},"def":{"name":"destroyed?","return_type":"Bool","visibility":"Public","body":"@destroyed"}},{"html_id":"new_record?-instance-method","name":"new_record?","doc":"Id generated on save or set on load","summary":"<p>Id generated on save or set on load</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":16,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L16"},"def":{"name":"new_record?","visibility":"Public","body":"if destroyed?\n  false\nelse\n  id_local = @id\n  (_new_flag || id_local.nil?) || id_local.try(&.empty?)\nend"}},{"html_id":"persisted?-instance-method","name":"persisted?","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":25,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L25"},"def":{"name":"persisted?","visibility":"Public","body":"!(new_record? || destroyed?)"}},{"html_id":"reload!-instance-method","name":"reload!","doc":"Reload the model in place.\n\nRaises\n- `RethinkORM::Error::DocumentNotSaved` if document was not previously persisted\n- `RethinkORM::Error::DocumentNotFound` if document fails to load","summary":"<p>Reload the model in place.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":159,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L159"},"def":{"name":"reload!","visibility":"Public","body":"if persisted?\nelse\n  raise(RethinkORM::Error::DocumentNotSaved.new(\"Cannot reload unpersisted document\"))\nend\nfound = self.class.table_query(&.get(self.id))\nif found.raw.nil?\n  raise(RethinkORM::Error::DocumentNotFound.new(\"Key not present: #{id}\"))\nend\nassign_attributes_from_trusted_json(found.to_json)\nclear_changes_information\nreset_associations\nself\n"}},{"html_id":"save(**options)-instance-method","name":"save","doc":"Saves the model.\n\nIf the model is new, a record gets created in the database, otherwise\nthe existing record gets updated.","summary":"<p>Saves the model.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":74,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L74"},"def":{"name":"save","double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"begin\n  save!(**options)\n  true\nrescue RethinkORM::Error\n  false\nend"}},{"html_id":"save!(**options)-instance-method","name":"save!","doc":"Saves the model.\n\nIf the model is new, a record gets created in the database, otherwise\nthe existing record gets updated.\n\nRaises\n- `RethinkORM::Error:DocumentNotSaved` if was document was destroyed before save\n- `RethinkORM::Error:DocumentNotSaved` if was document was not saved by RethinkDB\n- `RethinkORM::Error:DocumentInvalid` on validation failures","summary":"<p>Saves the model.</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":90,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L90"},"def":{"name":"save!","double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"if destroyed?\n  raise(RethinkORM::Error::DocumentNotSaved.new(\"Cannot save a destroyed document!\"))\nend\nnew_record? ? __create(**options) : __update(**options)\n"}},{"html_id":"update(**attributes)-instance-method","name":"update","doc":"Updates the model\n\nNon-atomic updates are required for multidocument updates","summary":"<p>Updates the model</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":98,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L98"},"def":{"name":"update","double_splat":{"name":"attributes","external_name":"attributes","restriction":""},"visibility":"Public","body":"begin\n  update!(**attributes)\n  true\nrescue RethinkORM::Error\n  false\nend"}},{"html_id":"update!(**attributes)-instance-method","name":"update!","doc":"Updates the model in place\n\nRaises `RethinkORM::Error::DocumentInvalid` on update failure","summary":"<p>Updates the model in place</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":108,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L108"},"def":{"name":"update!","double_splat":{"name":"attributes","external_name":"attributes","restriction":""},"visibility":"Public","body":"assign_attributes(**attributes)\nsave!\n"}},{"html_id":"update_fields(**attributes)-instance-method","name":"update_fields","doc":"Atomically update specified fields, without running callbacks\n","summary":"<p>Atomically update specified fields, without running callbacks</p>","abstract":false,"location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":115,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/persistence.cr#L115"},"def":{"name":"update_fields","double_splat":{"name":"attributes","external_name":"attributes","restriction":""},"visibility":"Public","body":"if new_record?\n  raise(RethinkORM::Error::DocumentNotSaved.new(\"Cannot update fields of a new document!\"))\nend\nassign_attributes(**attributes)\nupdate_body = subset_json(attributes.keys)\nresponse = Connection.raw_json(update_body) do |q, doc|\n  ((q.table(@@table_name)).get(@id)).update(doc)\nend\nreplaced = response[\"replaced\"]?.try(&.as_i?) || 0\nupdated = response[\"updated\"]?.try(&.as_i?) || 0\nif replaced > 0 || updated > 0\n  clear_changes_information\nend\nself\n"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Queries","path":"RethinkORM/Queries.html","kind":"module","full_name":"RethinkORM::Queries","name":"Queries","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/queries.cr","line_number":7,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/queries.cr#L7"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"types":[{"html_id":"rethinkdb-orm/RethinkORM/Queries/HasChanges","path":"RethinkORM/Queries/HasChanges.html","kind":"alias","full_name":"RethinkORM::Queries::HasChanges","name":"HasChanges","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/queries.cr","line_number":9,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/queries.cr#L9"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":true,"aliased":"RethinkDB::Term+","aliased_html":"RethinkDB::Term","const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"}},{"html_id":"rethinkdb-orm/RethinkORM/Queries/R","path":"RethinkORM/Queries/R.html","kind":"alias","full_name":"RethinkORM::Queries::R","name":"R","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/queries.cr","line_number":8,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/queries.cr#L8"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":true,"aliased":"RethinkDB","aliased_html":"<a href=\"../../RethinkDB.html\">RethinkDB</a>","const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Settings","path":"RethinkORM/Settings.html","kind":"module","full_name":"RethinkORM::Settings","name":"Settings","abstract":false,"ancestors":[{"html_id":"rethinkdb-orm/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"rethinkdb-orm/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"locations":[{"filename":"src/rethinkdb-orm/settings.cr","line_number":4,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/settings.cr#L4"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: host : String = ENV[\"RETHINKDB_HOST\"]? || \"localhost\", example: nil, validation: nil}, {decl: port : Int32 = (ENV[\"RETHINKDB_PORT\"]? || 28015).to_i, example: nil, validation: nil}, {decl: db : String = (ENV[\"RETHINKDB_DB\"]? || ENV[\"RETHINKDB_DATABASE\"]?) || \"test\", example: nil, validation: nil}, {decl: user : String = ENV[\"RETHINKDB_USER\"]? || \"admin\", example: nil, validation: nil}, {decl: password : String = ENV[\"RETHINKDB_PASSWORD\"]? || \"\", example: nil, validation: nil}, {decl: retry_interval : Time::Span = (ENV[\"RETHINKDB_TIMEOUT\"]? || 2).to_i.seconds, example: nil, validation: nil}, {decl: retry_attempts : Int32 = ENV[\"RETHINKDB_RETRIES\"]?.try(&.to_i) || 10, example: nil, validation: nil}, {decl: query_retries : Int32 = ENV[\"RETHINKDB_QUERY_RETRIES\"]?.try(&.to_i) || 10, example: nil, validation: nil}, {decl: lock_expire : Time::Span = (ENV[\"RETHINKDB_LOCK_EXPIRE\"]? || 30).to_i.seconds, example: nil, validation: nil}, {decl: lock_timeout : Time::Span = (ENV[\"RETHINKDB_LOCK_TIMEOUT\"]? || 5).to_i.seconds, example: nil, validation: nil}] of Nil"}],"included_modules":[{"html_id":"rethinkdb-orm/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"rethinkdb-orm/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"class_methods":[{"html_id":"configure(&)-class-method","name":"configure","abstract":false,"location":{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/settings.cr#L5"},"def":{"name":"configure","yields":1,"visibility":"Public","body":"yield settings"}},{"html_id":"settings-class-method","name":"settings","abstract":false,"location":{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/settings.cr#L5"},"def":{"name":"settings","visibility":"Public","body":"HabitatSettings"}}],"instance_methods":[{"html_id":"settings-instance-method","name":"settings","abstract":false,"location":{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/settings.cr#L5"},"def":{"name":"settings","visibility":"Public","body":"HabitatSettings"}}],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Settings/HabitatSettings","path":"RethinkORM/Settings/HabitatSettings.html","kind":"class","full_name":"RethinkORM::Settings::HabitatSettings","name":"HabitatSettings","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/settings.cr#L5"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"},"class_methods":[{"html_id":"db:String-class-method","name":"db","abstract":false,"def":{"name":"db","return_type":"String","visibility":"Public","body":"@@db.not_nil!"}},{"html_id":"db=(value:String)-class-method","name":"db=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"db=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"@@db = value"}},{"html_id":"db?-class-method","name":"db?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use db in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use db in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"db?","visibility":"Public","body":"@@db"}},{"html_id":"host:String-class-method","name":"host","abstract":false,"def":{"name":"host","return_type":"String","visibility":"Public","body":"@@host.not_nil!"}},{"html_id":"host=(value:String)-class-method","name":"host=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"host=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"@@host = value"}},{"html_id":"host?-class-method","name":"host?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use host in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use host in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"host?","visibility":"Public","body":"@@host"}},{"html_id":"lock_expire:Time::Span-class-method","name":"lock_expire","abstract":false,"def":{"name":"lock_expire","return_type":"Time::Span","visibility":"Public","body":"@@lock_expire.not_nil!"}},{"html_id":"lock_expire=(value:Time::Span)-class-method","name":"lock_expire=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"args_string":"(value : Time::Span)","args_html":"(value : Time::Span)","def":{"name":"lock_expire=","args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"visibility":"Public","body":"@@lock_expire = value"}},{"html_id":"lock_expire?-class-method","name":"lock_expire?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use lock_expire in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use lock_expire in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"lock_expire?","visibility":"Public","body":"@@lock_expire"}},{"html_id":"lock_timeout:Time::Span-class-method","name":"lock_timeout","abstract":false,"def":{"name":"lock_timeout","return_type":"Time::Span","visibility":"Public","body":"@@lock_timeout.not_nil!"}},{"html_id":"lock_timeout=(value:Time::Span)-class-method","name":"lock_timeout=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"args_string":"(value : Time::Span)","args_html":"(value : Time::Span)","def":{"name":"lock_timeout=","args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"visibility":"Public","body":"@@lock_timeout = value"}},{"html_id":"lock_timeout?-class-method","name":"lock_timeout?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use lock_timeout in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use lock_timeout in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"lock_timeout?","visibility":"Public","body":"@@lock_timeout"}},{"html_id":"password:String-class-method","name":"password","abstract":false,"def":{"name":"password","return_type":"String","visibility":"Public","body":"@@password.not_nil!"}},{"html_id":"password=(value:String)-class-method","name":"password=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"password=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"@@password = value"}},{"html_id":"password?-class-method","name":"password?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use password in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use password in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"password?","visibility":"Public","body":"@@password"}},{"html_id":"port:Int32-class-method","name":"port","abstract":false,"def":{"name":"port","return_type":"Int32","visibility":"Public","body":"@@port.not_nil!"}},{"html_id":"port=(value:Int32)-class-method","name":"port=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","def":{"name":"port=","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"visibility":"Public","body":"@@port = value"}},{"html_id":"port?-class-method","name":"port?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use port in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use port in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"port?","visibility":"Public","body":"@@port"}},{"html_id":"query_retries:Int32-class-method","name":"query_retries","abstract":false,"def":{"name":"query_retries","return_type":"Int32","visibility":"Public","body":"@@query_retries.not_nil!"}},{"html_id":"query_retries=(value:Int32)-class-method","name":"query_retries=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","def":{"name":"query_retries=","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"visibility":"Public","body":"@@query_retries = value"}},{"html_id":"query_retries?-class-method","name":"query_retries?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use query_retries in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use query_retries in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"query_retries?","visibility":"Public","body":"@@query_retries"}},{"html_id":"retry_attempts:Int32-class-method","name":"retry_attempts","abstract":false,"def":{"name":"retry_attempts","return_type":"Int32","visibility":"Public","body":"@@retry_attempts.not_nil!"}},{"html_id":"retry_attempts=(value:Int32)-class-method","name":"retry_attempts=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","def":{"name":"retry_attempts=","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"visibility":"Public","body":"@@retry_attempts = value"}},{"html_id":"retry_attempts?-class-method","name":"retry_attempts?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use retry_attempts in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use retry_attempts in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"retry_attempts?","visibility":"Public","body":"@@retry_attempts"}},{"html_id":"retry_interval:Time::Span-class-method","name":"retry_interval","abstract":false,"def":{"name":"retry_interval","return_type":"Time::Span","visibility":"Public","body":"@@retry_interval.not_nil!"}},{"html_id":"retry_interval=(value:Time::Span)-class-method","name":"retry_interval=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"args_string":"(value : Time::Span)","args_html":"(value : Time::Span)","def":{"name":"retry_interval=","args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"visibility":"Public","body":"@@retry_interval = value"}},{"html_id":"retry_interval?-class-method","name":"retry_interval?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use retry_interval in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use retry_interval in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"retry_interval?","visibility":"Public","body":"@@retry_interval"}},{"html_id":"to_h-class-method","name":"to_h","doc":"Generates a hash using the provided values","summary":"<p>Generates a hash using the provided values</p>","abstract":false,"def":{"name":"to_h","visibility":"Public","body":"{\"host\" => host, \"port\" => port, \"db\" => db, \"user\" => user, \"password\" => password, \"retry_interval\" => retry_interval, \"retry_attempts\" => retry_attempts, \"query_retries\" => query_retries, \"lock_expire\" => lock_expire, \"lock_timeout\" => lock_timeout}"}},{"html_id":"user:String-class-method","name":"user","abstract":false,"def":{"name":"user","return_type":"String","visibility":"Public","body":"@@user.not_nil!"}},{"html_id":"user=(value:String)-class-method","name":"user=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"user=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"@@user = value"}},{"html_id":"user?-class-method","name":"user?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use user in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use user in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"user?","visibility":"Public","body":"@@user"}}]}]},{"html_id":"rethinkdb-orm/RethinkORM/Table","path":"RethinkORM/Table.html","kind":"module","full_name":"RethinkORM::Table","name":"Table","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/table.cr","line_number":1,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/table.cr#L1"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"macros":[{"html_id":"__process_table__-macro","name":"__process_table__","abstract":false,"location":{"filename":"src/rethinkdb-orm/table.cr","line_number":22,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/table.cr#L22"},"def":{"name":"__process_table__","visibility":"Public","body":"    \n{% if RethinkORM::Base::TABLES.includes?(TABLE_NAME[:name]) %}{% else %}\n      {% RethinkORM::Base::TABLES << TABLE_NAME[:name] %}\n    {% end %}\n\n\n    @@table_name : String = \n{{ TABLE_NAME[:name] }}\n\n\n    def self.table_name\n      @@table_name\n    \nend\n\n    def table_name\n      @@table_name\n    \nend\n  \n"}},{"html_id":"table(name)-macro","name":"table","doc":"Macro to manually set the table name of the model","summary":"<p>Macro to manually set the table name of the model</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/rethinkdb-orm/table.cr","line_number":18,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/table.cr#L18"},"def":{"name":"table","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"    \n{% TABLE_NAME[:name] = name.id.stringify %}\n\n  \n"}}]},{"html_id":"rethinkdb-orm/RethinkORM/Timestamps","path":"RethinkORM/Timestamps.html","kind":"module","full_name":"RethinkORM::Timestamps","name":"Timestamps","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/timestamps.cr","line_number":7,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/timestamps.cr#L7"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":"Creates created_at and updated_at attributes.\n- `updated_at` is set through the `before_update` callback\n- `created_at` is set through the `before_update` callback\n","summary":"<p>Creates created_at and updated_at attributes.</p>"},{"html_id":"rethinkdb-orm/RethinkORM/Validators","path":"RethinkORM/Validators.html","kind":"module","full_name":"RethinkORM::Validators","name":"Validators","abstract":false,"locations":[{"filename":"src/rethinkdb-orm/validators/unique.cr","line_number":1,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/validators/unique.cr#L1"}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"macros":[{"html_id":"ensure_unique(field,scope=[]ofNil,create_index=true,callback=nil,&transform)-macro","name":"ensure_unique","doc":"In case of transformations on field, allow user defined transform","summary":"<p>In case of transformations on field, allow user defined transform</p>","abstract":false,"args":[{"name":"field","external_name":"field","restriction":""},{"name":"scope","default_value":"[] of Nil","external_name":"scope","restriction":""},{"name":"create_index","default_value":"true","external_name":"create_index","restriction":""},{"name":"callback","default_value":"nil","external_name":"callback","restriction":""}],"args_string":"(field, scope = [] of Nil, create_index = true, callback = nil, &transform)","args_html":"(field, scope = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Nil</span>, create_index = <span class=\"n\">true</span>, callback = <span class=\"n\">nil</span>, &transform)","location":{"filename":"src/rethinkdb-orm/validators/unique.cr","line_number":3,"url":"https://github.com/spider-gazelle/rethinkdb-orm/blob/v6.0.0/src/rethinkdb-orm/validators/unique.cr#L3"},"def":{"name":"ensure_unique","args":[{"name":"field","external_name":"field","restriction":""},{"name":"scope","default_value":"[] of Nil","external_name":"scope","restriction":""},{"name":"create_index","default_value":"true","external_name":"create_index","restriction":""},{"name":"callback","default_value":"nil","external_name":"callback","restriction":""}],"block_arg":{"name":"transform","external_name":"transform","restriction":""},"visibility":"Public","body":"      \n{% if create_index %}\n        secondary_index({{ field }})\n      {% end %}\n\n\n      validate \n{{ field }}\n, \"should be unique\", ->(this: self) do\n        \n{% if scope.empty? %}\n          {% scope = [field] %}\n          {% proc_return_type = (FIELDS[field.id][:klass].union_types.reject(&.==(Nil)).join('|')).id %}\n        {% else %}\n          {% proc_return_type = \"Tuple(#{(scope.map do |s|\n  (FIELDS[s.id][:klass].union_types.reject(&.==(Nil)).join('|')).id\nend.join(\", \")).id})\".id %}\n        {% end %}\n\n\n        \n# Return if any values are nil\n\n        \n{% for s in scope %}\n          return true if this.{{ s.id }}.nil?\n        {% end %}\n\n\n        \n# Construct proc type fron scope array (forgive me mother, for I have sinned)\n\n        \n# Arguments are not-nillable as nil status is checked above.\n\n        \n{% proc_arg_type = \"#{(scope.map do |s|\n  (FIELDS[s.id][:klass].union_types.reject(&.==(Nil)).join('|')).id\nend.join(\", \")).id}\".id %}\n\n        \n{% signature = \"#{(scope.map do |s|\n  \"#{s.id}: #{(FIELDS[s.id][:klass].union_types.reject(&.==(Nil)).join('|')).id}\"\nend.join(\", \")).id}\".id %}\n\n\n        \n# Handle Transformation block/callback\n\n        \n{% if transform %}\n          # Construct a proc from a given block, call with argument.\n          transform_proc : Proc({{ proc_arg_type }}, {{ proc_return_type }}) = ->({{ signature.id }}) { {{ transform.body }} }\n\n          result : {{ proc_return_type }} = transform_proc.call(\n          {% for s in scope %}this.{{ s.id }}.not_nil!,{% end %}\n          )\n        {% else %}{% if callback %}\n          result : {{ proc_return_type }} = this.{{ callback.id }}(\n            {% for s in scope %}this.{{ s.id }}.not_nil!,{% end %}\n          )\n        {% else %}\n\n          {% if scope.size == 1 %}\n            # No transform\n            result = {\n              {% for s in scope %}this.{{ s.id }},{% end %}\n            }\n          {% else %}\n            result = {{ scope.first.id }}\n          {% end %}\n        {% end %}{% end %}\n\n\n        \n# Fetch Document\n\n        \n{% if scope.size == 1 %}\n          # Utilise generated secondary index\n          {% if create_index %}\n            doc = self.find_all([result], index: {{ field.id.stringify }}).first?\n          {% else %}\n            doc = self.where({{ field.id }}: result).first?\n          {% end %}\n        {% else %}\n          # Where query with all scoped fields\n          doc = self.where(\n            {% for s, index in scope %}{{ s.id }}: result[{{ index.id }}], {% end %}\n          ).first?\n        {% end %}\n\n\n        \n# Fields are not present in another document under present table\n\n        success = !(doc && doc.id != this.id)\n        \n{% if transform || callback %}\n          # Set fields in unique scope with result of transform block if document is unique\n          if success && !this.persisted?\n            {% if scope.size == 1 %}\n              this.{{ field.id }} = result\n            {% else %}\n              {% for s, index in scope %}\n                this.{{ s.id }} = result[{{ index.id }}]\n              {% end %}\n            {% end %}\n          end\n        {% end %}\n\n\n        success\n      \nend\n    \n"}}]}]}]}}